#!/bin/sh
# Copyright 2025 Cisco Systems, Inc. and its affiliates
# SPDX-License-Identifier: Apache-2.0


# Constants
HYDRA_TMP_DIR="/tmp/hydra_quickstart"
HYDRA_QUICKSTART_FILE="quickstart.yml"
HYDRA_CONFIG_FILE_REL_PATH="contrib/quickstart/5-min/hydra.yml"
HYDRA_REPOSITORY="https://github.com/ory/hydra.git"
HYDRA_VERSION="v2.3.0"
HYDRA_BINARY="docker run --rm -it oryd/hydra"
HYDRA_SPA_APP_ID="my-hydra-spa"

#######################################
# Set current IP address
#######################################
do_set_current_ip() {
  # Check for the 'ip' command, common on modern Linux
  if command -v ip >/dev/null 2>&1; then
    # Use 'ip route' to find the default route and get the src IP
    # This is the most reliable way to find the primary IP on a multi-homed system
    current_ip=$(ip route get 1.1.1.1 | awk '{print $7; exit}')
  # Check for the 'ifconfig' command, common on macOS and older Linux
  elif command -v ifconfig >/dev/null 2>&1; then
    # Parse ifconfig output
    # 1. Get lines with "inet " (note the space to exclude inet6)
    # 2. Exclude the loopback address (127.0.0.1)
    # 3. Use awk to print the second field (the IP address)
    # 4. Take the first IP found
    current_ip=$(ifconfig | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | head -n 1)
  else
    echo "Error: Could not find 'ip' or 'ifconfig' command." >&2
    return 1
  fi
}

#######################################
# Create an Hydra application using the Hydra CLI.
# Setup OIDC configuration.
#######################################
do_setup_oidc() {
  echo "Setting up OIDC configuration..."

  # Check if client already exists
  echo "Checking if client '$HYDRA_SPA_APP_ID' already exists..."
  if $HYDRA_BINARY get client "$HYDRA_SPA_APP_ID" --endpoint "http://${current_ip}:4445" >/dev/null 2>&1; then
    echo "Client '$HYDRA_SPA_APP_ID' already exists. Deleting and recreating..."

    # Delete the existing client
    if ! $HYDRA_BINARY delete client "$HYDRA_SPA_APP_ID" --endpoint "http://${current_ip}:4445"; then
      echo "Failed to delete existing client. Continuing anyway..."
    fi

    # Wait a moment for the deletion to process
    sleep 2
  fi

  # Create a new hydra application
  if ! $HYDRA_BINARY create client \
    --endpoint "http://${current_ip}:4445" \
    --id "$HYDRA_SPA_APP_ID" --audience api://default \
    --skip-consent --skip-logout-consent \
    --grant-type authorization_code,refresh_token \
    --response-type code \
    --scope offline_access,offline,email,openid,profile \
    --token-endpoint-auth-method none \
    --redirect-uri http://localhost:5500; then
    echo "Failed to create Hydra client. Check if Hydra admin API is accessible."
    return 1
  fi

  echo "Hydra application '$HYDRA_SPA_APP_ID' created."

  # Set the vars for other scripts/processes to use
  export OIDC_ISSUER_URL="http://${current_ip}:4444"
  export OIDC_CLIENT_ID="$HYDRA_SPA_APP_ID"
  export OIDC_LOGIN_URL="http://${current_ip}:4444"
  export OIDC_CLIENT_ID_CLAIM_NAME="client_id"
}

#######################################
# Set up Hydra by creating an application.
#######################################
do_setup_hydra() {
  echo "Setting up Hydra..."

  # Define the absolute path to the hydra config file
  hydra_config_path="${HYDRA_TMP_DIR}/${HYDRA_CONFIG_FILE_REL_PATH}"

  # Generate a random secret
  secret=$(head -c 16 /dev/urandom | base64 | tr -d '=+/')

  # Create the Hydra configuration file with the current IP and secret
  cat > "$hydra_config_path" << EOL
serve:
  public:
    cors:
      enabled: true
      allowed_origins:
        - '*'
urls:
  self:
    issuer: http://${current_ip}:4444
  consent: http://${current_ip}:3000/consent
  login: http://${current_ip}:3000/login
  logout: http://${current_ip}:3000/logout

secrets:
  system:
    - $secret

oidc:
  subject_identifiers:
    supported_types:
      - pairwise
      - public
    pairwise:
      salt: $secret
strategies:
  access_token: jwt
EOL

  echo "Updated Hydra config file at '$hydra_config_path' with current IP: $current_ip"
}

#######################################
# Clones Hydra repo and starts the Docker containers.
#######################################
do_start_hydra_server() {
  echo "Starting Hydra OAuth2 Server..."

  # Clone the Hydra repository into /tmp if it doesn't exist
  if [ ! -d "$HYDRA_TMP_DIR" ]; then
    echo "Cloning Hydra repository to '$HYDRA_TMP_DIR'..."
    git clone --depth 1 --branch "$HYDRA_VERSION" "$HYDRA_REPOSITORY" "$HYDRA_TMP_DIR"
  else
    echo "Hydra repository already exists in '$HYDRA_TMP_DIR'."
  fi

  # Start Hydra using docker compose, specifying the project directory
  docker compose --project-directory "$HYDRA_TMP_DIR" -f "${HYDRA_TMP_DIR}/${HYDRA_QUICKSTART_FILE}" up -d

  # Wait for Hydra to start
  echo "Waiting for Hydra services to start..."
  sleep 5

  echo "Hydra OAuth2 Server started."
}

#######################################
# Stops the Docker containers and cleans up the repo.
#######################################
do_stop_hydra_server() {
  echo "Stopping Hydra OAuth2 Server..."

  # Check if the hydra temp directory exists
  if [ ! -d "$HYDRA_TMP_DIR" ]; then
    echo "Hydra temp directory does not exist. Server may not be running."
    return 1
  fi

  # Stop Hydra using docker compose, specifying the project directory
  docker compose --project-directory "$HYDRA_TMP_DIR" -f "${HYDRA_TMP_DIR}/${HYDRA_QUICKSTART_FILE}" down -v

  # Clean up Hydra repository from /tmp
  rm -rf "$HYDRA_TMP_DIR"

  echo "Hydra OAuth2 Server stopped and temporary files cleaned up."
}

# Main script execution
# If argument "stop" is passed, stop the server and exit
if [ "$1" = "stop" ]; then
  do_stop_hydra_server

  return 0
fi

# Start and configure Hydra
do_set_current_ip
do_start_hydra_server
do_setup_hydra
do_setup_oidc

echo "Hydra setup complete."

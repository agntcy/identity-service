// Code generated by go-swagger; DO NOT EDIT.

package models

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1AppTypeCountEntry v1alpha1 app type count entry
//
// swagger:model v1alpha1AppTypeCountEntry
type V1alpha1AppTypeCountEntry struct {

	// The type of the App
	Key *V1alpha1AppType `json:"key,omitempty"`

	// The count of apps of the given type
	Value string `json:"value,omitempty"`
}

// Validate validates this v1alpha1 app type count entry
func (m *V1alpha1AppTypeCountEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1AppTypeCountEntry) validateKey(formats strfmt.Registry) error {
	if swag.IsZero(m.Key) { // not required
		return nil
	}

	if m.Key != nil {
		if err := m.Key.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("key")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("key")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this v1alpha1 app type count entry based on the context it is used
func (m *V1alpha1AppTypeCountEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1AppTypeCountEntry) contextValidateKey(ctx context.Context, formats strfmt.Registry) error {

	if m.Key != nil {

		if swag.IsZero(m.Key) { // not required
			return nil
		}

		if err := m.Key.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("key")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("key")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1AppTypeCountEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1AppTypeCountEntry) UnmarshalBinary(b []byte) error {
	var res V1alpha1AppTypeCountEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

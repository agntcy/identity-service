// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1Settings Identity Settings
//
// swagger:model v1alpha1Settings
type V1alpha1Settings struct {

	// An API Key for the Identity Service.
	// Read Only: true
	APIKey *V1alpha1APIKey `json:"apiKey,omitempty"`

	// Settings for the Issuer.
	IssuerSettings *V1alpha1IssuerSettings `json:"issuerSettings,omitempty"`
}

// Validate validates this v1alpha1 settings
func (m *V1alpha1Settings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuerSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1Settings) validateAPIKey(formats strfmt.Registry) error {
	if swag.IsZero(m.APIKey) { // not required
		return nil
	}

	if m.APIKey != nil {
		if err := m.APIKey.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("apiKey")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("apiKey")
			}

			return err
		}
	}

	return nil
}

func (m *V1alpha1Settings) validateIssuerSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.IssuerSettings) { // not required
		return nil
	}

	if m.IssuerSettings != nil {
		if err := m.IssuerSettings.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("issuerSettings")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("issuerSettings")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this v1alpha1 settings based on the context it is used
func (m *V1alpha1Settings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPIKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIssuerSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1Settings) contextValidateAPIKey(ctx context.Context, formats strfmt.Registry) error {

	if m.APIKey != nil {

		if swag.IsZero(m.APIKey) { // not required
			return nil
		}

		if err := m.APIKey.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("apiKey")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("apiKey")
			}

			return err
		}
	}

	return nil
}

func (m *V1alpha1Settings) contextValidateIssuerSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.IssuerSettings != nil {

		if swag.IsZero(m.IssuerSettings) { // not required
			return nil
		}

		if err := m.IssuerSettings.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("issuerSettings")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("issuerSettings")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1Settings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1Settings) UnmarshalBinary(b []byte) error {
	var res V1alpha1Settings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

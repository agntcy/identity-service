// Code generated by go-swagger; DO NOT EDIT.

package models

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1GetAppsCountResponse v1alpha1 get apps count response
//
// swagger:model v1alpha1GetAppsCountResponse
type V1alpha1GetAppsCountResponse struct {

	// The apps count per app type
	Counts []*V1alpha1AppTypeCountEntry `json:"counts"`

	// The total count
	Total string `json:"total,omitempty"`
}

// Validate validates this v1alpha1 get apps count response
func (m *V1alpha1GetAppsCountResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCounts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1GetAppsCountResponse) validateCounts(formats strfmt.Registry) error {
	if swag.IsZero(m.Counts) { // not required
		return nil
	}

	for i := 0; i < len(m.Counts); i++ {
		if swag.IsZero(m.Counts[i]) { // not required
			continue
		}

		if m.Counts[i] != nil {
			if err := m.Counts[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("counts" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("counts" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1alpha1 get apps count response based on the context it is used
func (m *V1alpha1GetAppsCountResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1GetAppsCountResponse) contextValidateCounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Counts); i++ {

		if m.Counts[i] != nil {

			if swag.IsZero(m.Counts[i]) { // not required
				return nil
			}

			if err := m.Counts[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("counts" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("counts" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1GetAppsCountResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1GetAppsCountResponse) UnmarshalBinary(b []byte) error {
	var res V1alpha1GetAppsCountResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

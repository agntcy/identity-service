// Code generated by go-swagger; DO NOT EDIT.

package app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRefreshAppAPIKeyParams creates a new RefreshAppAPIKeyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRefreshAppAPIKeyParams() *RefreshAppAPIKeyParams {
	return &RefreshAppAPIKeyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRefreshAppAPIKeyParamsWithTimeout creates a new RefreshAppAPIKeyParams object
// with the ability to set a timeout on a request.
func NewRefreshAppAPIKeyParamsWithTimeout(timeout time.Duration) *RefreshAppAPIKeyParams {
	return &RefreshAppAPIKeyParams{
		timeout: timeout,
	}
}

// NewRefreshAppAPIKeyParamsWithContext creates a new RefreshAppAPIKeyParams object
// with the ability to set a context for a request.
func NewRefreshAppAPIKeyParamsWithContext(ctx context.Context) *RefreshAppAPIKeyParams {
	return &RefreshAppAPIKeyParams{
		Context: ctx,
	}
}

// NewRefreshAppAPIKeyParamsWithHTTPClient creates a new RefreshAppAPIKeyParams object
// with the ability to set a custom HTTPClient for a request.
func NewRefreshAppAPIKeyParamsWithHTTPClient(client *http.Client) *RefreshAppAPIKeyParams {
	return &RefreshAppAPIKeyParams{
		HTTPClient: client,
	}
}

/*
RefreshAppAPIKeyParams contains all the parameters to send to the API endpoint

	for the refresh app Api key operation.

	Typically these are written to a http.Request.
*/
type RefreshAppAPIKeyParams struct {

	/* AppID.

	   App Id to refresh the API Key for.
	*/
	AppID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the refresh app Api key params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RefreshAppAPIKeyParams) WithDefaults() *RefreshAppAPIKeyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the refresh app Api key params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RefreshAppAPIKeyParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the refresh app Api key params
func (o *RefreshAppAPIKeyParams) WithTimeout(timeout time.Duration) *RefreshAppAPIKeyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the refresh app Api key params
func (o *RefreshAppAPIKeyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the refresh app Api key params
func (o *RefreshAppAPIKeyParams) WithContext(ctx context.Context) *RefreshAppAPIKeyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the refresh app Api key params
func (o *RefreshAppAPIKeyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the refresh app Api key params
func (o *RefreshAppAPIKeyParams) WithHTTPClient(client *http.Client) *RefreshAppAPIKeyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the refresh app Api key params
func (o *RefreshAppAPIKeyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppID adds the appID to the refresh app Api key params
func (o *RefreshAppAPIKeyParams) WithAppID(appID string) *RefreshAppAPIKeyParams {
	o.SetAppID(appID)
	return o
}

// SetAppID adds the appId to the refresh app Api key params
func (o *RefreshAppAPIKeyParams) SetAppID(appID string) {
	o.AppID = appID
}

// WriteToRequest writes these params to a swagger request
func (o *RefreshAppAPIKeyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param appId
	if err := r.SetPathParam("appId", o.AppID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListPoliciesParams creates a new ListPoliciesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListPoliciesParams() *ListPoliciesParams {
	return &ListPoliciesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListPoliciesParamsWithTimeout creates a new ListPoliciesParams object
// with the ability to set a timeout on a request.
func NewListPoliciesParamsWithTimeout(timeout time.Duration) *ListPoliciesParams {
	return &ListPoliciesParams{
		timeout: timeout,
	}
}

// NewListPoliciesParamsWithContext creates a new ListPoliciesParams object
// with the ability to set a context for a request.
func NewListPoliciesParamsWithContext(ctx context.Context) *ListPoliciesParams {
	return &ListPoliciesParams{
		Context: ctx,
	}
}

// NewListPoliciesParamsWithHTTPClient creates a new ListPoliciesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListPoliciesParamsWithHTTPClient(client *http.Client) *ListPoliciesParams {
	return &ListPoliciesParams{
		HTTPClient: client,
	}
}

/*
ListPoliciesParams contains all the parameters to send to the API endpoint

	for the list policies operation.

	Typically these are written to a http.Request.
*/
type ListPoliciesParams struct {

	/* AppIds.

	   A filter used to fetch policies only for the specified Agentic Services
	*/
	AppIds []string

	/* Page.

	   The current page of the pagination

	   Format: int32
	*/
	Page *int32

	/* Query.

	   The search query
	*/
	Query *string

	/* RulesForAppIds.

	   A filter used to fetch policies where the rules applies for the specified Agentic Services
	*/
	RulesForAppIds []string

	/* Size.

	   The page size of the pagination

	   Format: int32
	*/
	Size *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list policies params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListPoliciesParams) WithDefaults() *ListPoliciesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list policies params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListPoliciesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list policies params
func (o *ListPoliciesParams) WithTimeout(timeout time.Duration) *ListPoliciesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list policies params
func (o *ListPoliciesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list policies params
func (o *ListPoliciesParams) WithContext(ctx context.Context) *ListPoliciesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list policies params
func (o *ListPoliciesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list policies params
func (o *ListPoliciesParams) WithHTTPClient(client *http.Client) *ListPoliciesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list policies params
func (o *ListPoliciesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppIds adds the appIds to the list policies params
func (o *ListPoliciesParams) WithAppIds(appIds []string) *ListPoliciesParams {
	o.SetAppIds(appIds)
	return o
}

// SetAppIds adds the appIds to the list policies params
func (o *ListPoliciesParams) SetAppIds(appIds []string) {
	o.AppIds = appIds
}

// WithPage adds the page to the list policies params
func (o *ListPoliciesParams) WithPage(page *int32) *ListPoliciesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list policies params
func (o *ListPoliciesParams) SetPage(page *int32) {
	o.Page = page
}

// WithQuery adds the query to the list policies params
func (o *ListPoliciesParams) WithQuery(query *string) *ListPoliciesParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the list policies params
func (o *ListPoliciesParams) SetQuery(query *string) {
	o.Query = query
}

// WithRulesForAppIds adds the rulesForAppIds to the list policies params
func (o *ListPoliciesParams) WithRulesForAppIds(rulesForAppIds []string) *ListPoliciesParams {
	o.SetRulesForAppIds(rulesForAppIds)
	return o
}

// SetRulesForAppIds adds the rulesForAppIds to the list policies params
func (o *ListPoliciesParams) SetRulesForAppIds(rulesForAppIds []string) {
	o.RulesForAppIds = rulesForAppIds
}

// WithSize adds the size to the list policies params
func (o *ListPoliciesParams) WithSize(size *int32) *ListPoliciesParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the list policies params
func (o *ListPoliciesParams) SetSize(size *int32) {
	o.Size = size
}

// WriteToRequest writes these params to a swagger request
func (o *ListPoliciesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AppIds != nil {

		// binding items for appIds
		joinedAppIds := o.bindParamAppIds(reg)

		// query array param appIds
		if err := r.SetQueryParam("appIds", joinedAppIds...); err != nil {
			return err
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.RulesForAppIds != nil {

		// binding items for rulesForAppIds
		joinedRulesForAppIds := o.bindParamRulesForAppIds(reg)

		// query array param rulesForAppIds
		if err := r.SetQueryParam("rulesForAppIds", joinedRulesForAppIds...); err != nil {
			return err
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListPolicies binds the parameter appIds
func (o *ListPoliciesParams) bindParamAppIds(formats strfmt.Registry) []string {
	appIdsIR := o.AppIds

	var appIdsIC []string
	for _, appIdsIIR := range appIdsIR { // explode []string

		appIdsIIV := appIdsIIR // string as string
		appIdsIC = append(appIdsIC, appIdsIIV)
	}

	// items.CollectionFormat: "multi"
	appIdsIS := swag.JoinByFormat(appIdsIC, "multi")

	return appIdsIS
}

// bindParamListPolicies binds the parameter rulesForAppIds
func (o *ListPoliciesParams) bindParamRulesForAppIds(formats strfmt.Registry) []string {
	rulesForAppIdsIR := o.RulesForAppIds

	var rulesForAppIdsIC []string
	for _, rulesForAppIdsIIR := range rulesForAppIdsIR { // explode []string

		rulesForAppIdsIIV := rulesForAppIdsIIR // string as string
		rulesForAppIdsIC = append(rulesForAppIdsIC, rulesForAppIdsIIV)
	}

	// items.CollectionFormat: "multi"
	rulesForAppIdsIS := swag.JoinByFormat(rulesForAppIdsIC, "multi")

	return rulesForAppIdsIS
}

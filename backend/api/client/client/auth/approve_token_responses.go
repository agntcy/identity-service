// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/outshift/identity-service/api/client/models"
)

// ApproveTokenReader is a Reader for the ApproveToken structure.
type ApproveTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApproveTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewApproveTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewApproveTokenDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewApproveTokenOK creates a ApproveTokenOK with default headers values
func NewApproveTokenOK() *ApproveTokenOK {
	return &ApproveTokenOK{}
}

/*
ApproveTokenOK describes a response with status code 200, with default header values.

A successful response.
*/
type ApproveTokenOK struct {
	Payload any
}

// IsSuccess returns true when this approve token o k response has a 2xx status code
func (o *ApproveTokenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this approve token o k response has a 3xx status code
func (o *ApproveTokenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve token o k response has a 4xx status code
func (o *ApproveTokenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this approve token o k response has a 5xx status code
func (o *ApproveTokenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this approve token o k response a status code equal to that given
func (o *ApproveTokenOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the approve token o k response
func (o *ApproveTokenOK) Code() int {
	return 200
}

func (o *ApproveTokenOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1alpha1/auth/approve_token][%d] approveTokenOK %s", 200, payload)
}

func (o *ApproveTokenOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1alpha1/auth/approve_token][%d] approveTokenOK %s", 200, payload)
}

func (o *ApproveTokenOK) GetPayload() any {
	return o.Payload
}

func (o *ApproveTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewApproveTokenDefault creates a ApproveTokenDefault with default headers values
func NewApproveTokenDefault(code int) *ApproveTokenDefault {
	return &ApproveTokenDefault{
		_statusCode: code,
	}
}

/*
ApproveTokenDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ApproveTokenDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this approve token default response has a 2xx status code
func (o *ApproveTokenDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this approve token default response has a 3xx status code
func (o *ApproveTokenDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this approve token default response has a 4xx status code
func (o *ApproveTokenDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this approve token default response has a 5xx status code
func (o *ApproveTokenDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this approve token default response a status code equal to that given
func (o *ApproveTokenDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the approve token default response
func (o *ApproveTokenDefault) Code() int {
	return o._statusCode
}

func (o *ApproveTokenDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1alpha1/auth/approve_token][%d] ApproveToken default %s", o._statusCode, payload)
}

func (o *ApproveTokenDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1alpha1/auth/approve_token][%d] ApproveToken default %s", o._statusCode, payload)
}

func (o *ApproveTokenDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *ApproveTokenDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

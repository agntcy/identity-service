// This file was autogenerated by go-to-protobuf. Do not edit it manually!

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: agntcy/identity-saas/core/v1alpha1/mcp.proto

package identity_core_sdk_go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// McpResource represents a resource available on the MCP server.
// This can be a file, a database, or any other type of resource.
type McpResource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the resource.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Description of the resource.
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// URI of the resource.
	Uri           *string `protobuf:"bytes,3,opt,name=uri,proto3,oneof" json:"uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpResource) Reset() {
	*x = McpResource{}
	mi := &file_agntcy_identity_core_v1alpha1_mcp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpResource) ProtoMessage() {}

func (x *McpResource) ProtoReflect() protoreflect.Message {
	mi := &file_agntcy_identity_core_v1alpha1_mcp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpResource.ProtoReflect.Descriptor instead.
func (*McpResource) Descriptor() ([]byte, []int) {
	return file_agntcy_identity_core_v1alpha1_mcp_proto_rawDescGZIP(), []int{0}
}

func (x *McpResource) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *McpResource) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *McpResource) GetUri() string {
	if x != nil && x.Uri != nil {
		return *x.Uri
	}
	return ""
}

// McpServer represents an MCP server that provides a set of tools and resources
// The server needs to be deployed at a specific URL
type McpServer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the server.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Url of the deployed server.
	Url *string `protobuf:"bytes,2,opt,name=url,proto3,oneof" json:"url,omitempty"`
	// The tools available on the server.
	Tools []*McpTool `protobuf:"bytes,3,rep,name=tools,proto3" json:"tools,omitempty"`
	// The resources available on the server.
	Resources     []*McpResource `protobuf:"bytes,4,rep,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpServer) Reset() {
	*x = McpServer{}
	mi := &file_agntcy_identity_core_v1alpha1_mcp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpServer) ProtoMessage() {}

func (x *McpServer) ProtoReflect() protoreflect.Message {
	mi := &file_agntcy_identity_core_v1alpha1_mcp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpServer.ProtoReflect.Descriptor instead.
func (*McpServer) Descriptor() ([]byte, []int) {
	return file_agntcy_identity_core_v1alpha1_mcp_proto_rawDescGZIP(), []int{1}
}

func (x *McpServer) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *McpServer) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *McpServer) GetTools() []*McpTool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *McpServer) GetResources() []*McpResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

// McpTool represents a tool available on the MCP server.
// This can be a function with name, description, and parameters.
type McpTool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the tool.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Description of the tool.
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Parameters of the tool.
	// This is a JSON object that describes the parameters
	Parameters *string `protobuf:"bytes,3,opt,name=parameters,proto3,oneof" json:"parameters,omitempty"`
	// Oauth2 Protected Resource metadata.
	// This will correspond to a resource on the server.
	// Or can be specified or overridden by the auth policies.
	// This complies with RFC 9728.
	Oauth2Metadata *Oauth2Metadata `protobuf:"bytes,4,opt,name=oauth2_metadata,json=oauth2Metadata,proto3,oneof" json:"oauth2_metadata,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *McpTool) Reset() {
	*x = McpTool{}
	mi := &file_agntcy_identity_core_v1alpha1_mcp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpTool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpTool) ProtoMessage() {}

func (x *McpTool) ProtoReflect() protoreflect.Message {
	mi := &file_agntcy_identity_core_v1alpha1_mcp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpTool.ProtoReflect.Descriptor instead.
func (*McpTool) Descriptor() ([]byte, []int) {
	return file_agntcy_identity_core_v1alpha1_mcp_proto_rawDescGZIP(), []int{2}
}

func (x *McpTool) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *McpTool) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *McpTool) GetParameters() string {
	if x != nil && x.Parameters != nil {
		return *x.Parameters
	}
	return ""
}

func (x *McpTool) GetOauth2Metadata() *Oauth2Metadata {
	if x != nil {
		return x.Oauth2Metadata
	}
	return nil
}

// Oauth2Metadata represents the OAuth2 metadata for a protected resource.
// This complies with RFC 9728.
type Oauth2Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource identifier.
	Resource *string `protobuf:"bytes,1,opt,name=resource,proto3,oneof" json:"resource,omitempty"`
	// Authorization servers for the OAuth2 server.
	// This is a list of strings, such as "https://example.com/oauth2/authorize".
	AuthorizationServers *string `protobuf:"bytes,2,opt,name=authorization_servers,json=authorizationServers,proto3,oneof" json:"authorization_servers,omitempty"`
	// Bearer methods supported
	// This is a list of strings, such as "client_credentials" or "authorization_code".
	BearerMethodsSupported []string `protobuf:"bytes,3,rep,name=bearer_methods_supported,json=bearerMethodsSupported,proto3" json:"bearer_methods_supported,omitempty"`
	// Scopes supported
	// This is a list of strings, such as "openid" or "profile".
	ScopesSupported []string `protobuf:"bytes,4,rep,name=scopes_supported,json=scopesSupported,proto3" json:"scopes_supported,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Oauth2Metadata) Reset() {
	*x = Oauth2Metadata{}
	mi := &file_agntcy_identity_core_v1alpha1_mcp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Oauth2Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oauth2Metadata) ProtoMessage() {}

func (x *Oauth2Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_agntcy_identity_core_v1alpha1_mcp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oauth2Metadata.ProtoReflect.Descriptor instead.
func (*Oauth2Metadata) Descriptor() ([]byte, []int) {
	return file_agntcy_identity_core_v1alpha1_mcp_proto_rawDescGZIP(), []int{3}
}

func (x *Oauth2Metadata) GetResource() string {
	if x != nil && x.Resource != nil {
		return *x.Resource
	}
	return ""
}

func (x *Oauth2Metadata) GetAuthorizationServers() string {
	if x != nil && x.AuthorizationServers != nil {
		return *x.AuthorizationServers
	}
	return ""
}

func (x *Oauth2Metadata) GetBearerMethodsSupported() []string {
	if x != nil {
		return x.BearerMethodsSupported
	}
	return nil
}

func (x *Oauth2Metadata) GetScopesSupported() []string {
	if x != nil {
		return x.ScopesSupported
	}
	return nil
}

var File_agntcy_identity_core_v1alpha1_mcp_proto protoreflect.FileDescriptor

const file_agntcy_identity_core_v1alpha1_mcp_proto_rawDesc = "" +
	"\n" +
	"'agntcy/identity-saas/core/v1alpha1/mcp.proto\x12\x1dagntcy.identity.core.v1alpha1\"\x85\x01\n" +
	"\vMcpResource\x12\x17\n" +
	"\x04name\x18\x01 \x01(\tH\x00R\x04name\x88\x01\x01\x12%\n" +
	"\vdescription\x18\x02 \x01(\tH\x01R\vdescription\x88\x01\x01\x12\x15\n" +
	"\x03uri\x18\x03 \x01(\tH\x02R\x03uri\x88\x01\x01B\a\n" +
	"\x05_nameB\x0e\n" +
	"\f_descriptionB\x06\n" +
	"\x04_uri\"\xd4\x01\n" +
	"\tMcpServer\x12\x17\n" +
	"\x04name\x18\x01 \x01(\tH\x00R\x04name\x88\x01\x01\x12\x15\n" +
	"\x03url\x18\x02 \x01(\tH\x01R\x03url\x88\x01\x01\x12<\n" +
	"\x05tools\x18\x03 \x03(\v2&.agntcy.identity.core.v1alpha1.McpToolR\x05tools\x12H\n" +
	"\tresources\x18\x04 \x03(\v2*.agntcy.identity.core.v1alpha1.McpResourceR\tresourcesB\a\n" +
	"\x05_nameB\x06\n" +
	"\x04_url\"\x87\x02\n" +
	"\aMcpTool\x12\x17\n" +
	"\x04name\x18\x01 \x01(\tH\x00R\x04name\x88\x01\x01\x12%\n" +
	"\vdescription\x18\x02 \x01(\tH\x01R\vdescription\x88\x01\x01\x12#\n" +
	"\n" +
	"parameters\x18\x03 \x01(\tH\x02R\n" +
	"parameters\x88\x01\x01\x12[\n" +
	"\x0foauth2_metadata\x18\x04 \x01(\v2-.agntcy.identity.core.v1alpha1.Oauth2MetadataH\x03R\x0eoauth2Metadata\x88\x01\x01B\a\n" +
	"\x05_nameB\x0e\n" +
	"\f_descriptionB\r\n" +
	"\v_parametersB\x12\n" +
	"\x10_oauth2_metadata\"\xf7\x01\n" +
	"\x0eOauth2Metadata\x12\x1f\n" +
	"\bresource\x18\x01 \x01(\tH\x00R\bresource\x88\x01\x01\x128\n" +
	"\x15authorization_servers\x18\x02 \x01(\tH\x01R\x14authorizationServers\x88\x01\x01\x128\n" +
	"\x18bearer_methods_supported\x18\x03 \x03(\tR\x16bearerMethodsSupported\x12)\n" +
	"\x10scopes_supported\x18\x04 \x03(\tR\x0fscopesSupportedB\v\n" +
	"\t_resourceB\x18\n" +
	"\x16_authorization_serversBZZXgithub.com/agntcy/identity-saas/api/server/agntcy/identity-saas/core/v1alpha1;identity_core_sdk_gob\x06proto3"

var (
	file_agntcy_identity_core_v1alpha1_mcp_proto_rawDescOnce sync.Once
	file_agntcy_identity_core_v1alpha1_mcp_proto_rawDescData []byte
)

func file_agntcy_identity_core_v1alpha1_mcp_proto_rawDescGZIP() []byte {
	file_agntcy_identity_core_v1alpha1_mcp_proto_rawDescOnce.Do(func() {
		file_agntcy_identity_core_v1alpha1_mcp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_agntcy_identity_core_v1alpha1_mcp_proto_rawDesc), len(file_agntcy_identity_core_v1alpha1_mcp_proto_rawDesc)))
	})
	return file_agntcy_identity_core_v1alpha1_mcp_proto_rawDescData
}

var file_agntcy_identity_core_v1alpha1_mcp_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_agntcy_identity_core_v1alpha1_mcp_proto_goTypes = []any{
	(*McpResource)(nil),    // 0: agntcy.identity.core.v1alpha1.McpResource
	(*McpServer)(nil),      // 1: agntcy.identity.core.v1alpha1.McpServer
	(*McpTool)(nil),        // 2: agntcy.identity.core.v1alpha1.McpTool
	(*Oauth2Metadata)(nil), // 3: agntcy.identity.core.v1alpha1.Oauth2Metadata
}
var file_agntcy_identity_core_v1alpha1_mcp_proto_depIdxs = []int32{
	2, // 0: agntcy.identity.core.v1alpha1.McpServer.tools:type_name -> agntcy.identity.core.v1alpha1.McpTool
	0, // 1: agntcy.identity.core.v1alpha1.McpServer.resources:type_name -> agntcy.identity.core.v1alpha1.McpResource
	3, // 2: agntcy.identity.core.v1alpha1.McpTool.oauth2_metadata:type_name -> agntcy.identity.core.v1alpha1.Oauth2Metadata
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_agntcy_identity_core_v1alpha1_mcp_proto_init() }
func file_agntcy_identity_core_v1alpha1_mcp_proto_init() {
	if File_agntcy_identity_core_v1alpha1_mcp_proto != nil {
		return
	}
	file_agntcy_identity_core_v1alpha1_mcp_proto_msgTypes[0].OneofWrappers = []any{}
	file_agntcy_identity_core_v1alpha1_mcp_proto_msgTypes[1].OneofWrappers = []any{}
	file_agntcy_identity_core_v1alpha1_mcp_proto_msgTypes[2].OneofWrappers = []any{}
	file_agntcy_identity_core_v1alpha1_mcp_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_agntcy_identity_core_v1alpha1_mcp_proto_rawDesc), len(file_agntcy_identity_core_v1alpha1_mcp_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_agntcy_identity_core_v1alpha1_mcp_proto_goTypes,
		DependencyIndexes: file_agntcy_identity_core_v1alpha1_mcp_proto_depIdxs,
		MessageInfos:      file_agntcy_identity_core_v1alpha1_mcp_proto_msgTypes,
	}.Build()
	File_agntcy_identity_core_v1alpha1_mcp_proto = out.File
	file_agntcy_identity_core_v1alpha1_mcp_proto_goTypes = nil
	file_agntcy_identity_core_v1alpha1_mcp_proto_depIdxs = nil
}

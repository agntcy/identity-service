// Copyright 2025 AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package outshift.identity.service.v1alpha1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "outshift/identity/service/v1alpha1/app.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/outshift/identity-service/api/server/outshift/identity/service/v1alpha1;identity_service_sdk_go";

// AuthService manages auth.
service AuthService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {name: "Auth"};
  // App info endpoint
  rpc AppInfo(google.protobuf.Empty) returns (AppInfoResponse) {
    option (google.api.http) = {get: "/v1alpha1/auth/app_info"};

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "AppInfo";
      summary: "Get App Info";
    };
  }

  // Authorize a request from an Agent or MCP Server
  rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/auth/authorize",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "Authorize";
      summary: "Authorize a request from an Agent or MCP Server";
    };
  }

  // Request token for an Agent or MCP Server
  rpc Token(TokenRequest) returns (TokenResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/auth/token"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "RequestToken";
      summary: "Request token for an Agent or MCP Server";
    };
  }

  // Handle external authorization requests
  rpc ExtAuthz(ExtAuthzRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1alpha1/auth/ext_authz"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "ExtAuthz";
      summary: "Handle external authorization requests";
    };
  }

  // Handle manual approval of external authorization requets
  rpc ApproveToken(ApproveTokenRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1alpha1/auth/approve_token"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "ApproveToken";
      summary: "Handle manual approval of external authorization requets";
    };
  }
}

message AppInfoResponse {
  // The App information.
  App app = 1;
}

message AuthorizeRequest {
  // The app id for which authorization is requested.
  optional string app_id = 1;

  // The MCP Server tool name.
  optional string tool_name = 2;

  // The User context in the form of an id or access token.
  // Mandatory for User Approval Flows.
  optional string user_token = 3;
}

message AuthorizeResponse {
  // If authorization is successful, return a code to be used for
  // the token endpoint.
  string authorization_code = 1;
}

message TokenRequest {
  // Pass the code received from the authorization endpoint.
  string authorization_code = 1;
}

message TokenResponse {
  // The access token issued to the Agent or MCP Server.
  string access_token = 1;
}

message ExtAuthzRequest {
  // The access token to be authorized.
  string access_token = 1;

  // The tool name that will be invoked
  optional string tool_name = 2;
}

message ApproveTokenRequest {
  // The device id used to handle the approval requestion
  string device_id = 1;

  // The session id related to the token that needs to be approved
  string session_id = 2;

  // The OTP sent to the device related to the request
  string otp = 3;

  // The action made by the user (true: allow the token, false: deny the token)
  bool approve = 4;
}

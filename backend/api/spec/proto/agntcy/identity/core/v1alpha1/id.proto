// Copyright 2025 Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto3";

package agntcy.identity.core.v1alpha1;

// Package-wide variables from generator "generated".
option go_package = "github.com/agntcy/identity-saas/api/server/agntcy/identity-saas/core/v1alpha1;identity_core_sdk_go";

// JWK represents:
// - a JSON Web Key (JWK) with the respective fields specific to RSA algorithms.
// - a Quantum JSON Web Key (QJWK) with the respective fields specific to AKP algorithms.
message Jwk {
  // ALG represents the algorithm intended for use with the key.
  // Example algorithms for Post-Quantum ML-DSA family:
  // "ML-DSA-44", "ML-DSA-65", "ML-DSA-87".
  // Some example algorithms are "RS256", "RS384", "RS512" for RSA algorithms.
  optional string alg = 1;

  // KTY represents the key type parameter.
  // It specifies the family of quantum algorithms used with the key,
  // such as "AKP" for post quantum algorithms
  // or "RSA" for non quantum algorithms.
  optional string kty = 2;

  // Use represents the intended use of the key.
  // Some example values are "enc" and "sig".
  optional string use = 3;

  // KID represents the key ID.
  // It is used to match a specific key.
  optional string kid = 4;

  // The public key for the AKP kty.
  optional string pub = 5;

  // The private key for the AKP kty.
  optional string priv = 6;

  // Seed used to derive keys for ML-DSA alg.
  optional string seed = 7;

  // The exponent for the RSA public key.
  optional string e = 8;

  // The modulus for the RSA public key.
  optional string n = 9;

  // The private exponent for the RSA kty.
  optional string d = 10;

  // The first prime factor for the RSA private key.
  optional string p = 11;

  // The second prime factor for the RSA private key.
  optional string q = 12;

  // The first factor CRT exponent for the RSA private key.
  optional string dp = 13;

  // The second factor CRT exponent for the RSA private key.
  optional string dq = 14;

  // The first CRT coefficient for the RSA private key.
  optional string qi = 15;
}

// JWKS represents a set of JSON Web Keys (JWKs).
message Jwks {
  // Keys represents the list of JSON Web Keys.
  repeated Jwk keys = 1;
}

// ResolverMetadata represents a set of data describing the ID including mechanisms such as:
//   - cryptographic public keys - used to authenticate itself and prove
//     association with the ID
//   - service - ways of communicating with the node that published the document
//
// A ResolverMetadata can be retrieved by resolving an ID.
message ResolverMetadata {
  // The ID
  // The metadata below is related as claims to the ID
  optional string id = 1;

  // VerificationMethod is a list of cryptographic public keys, which can be used
  // to authenticate or authorize interactions with the entities represented by the ID.
  repeated VerificationMethod verification_method = 2;

  // Service is used in ResolverMetadatas to express ways of communicating with
  // the node that published the document.
  repeated Service service = 3;

  // AssertionMethod is used to specify how the entity represented by the ID
  // is expected to express claims, such as for the purposes of issuing a VCs.
  repeated string assertion_method = 4;
}

// Service is used in ResolverMetadata to express ways of communicating with
// the node that published the document.
message Service {
  // ServiceEndpoint is a network address, such as an HTTP URL, of the
  // node.
  repeated string service_endpoint = 1;
}

// VerificationMethod expresses verification methods, such as cryptographic
// public keys, which can be used to authenticate or authorize interactions
// with the entities represented by the ID. It is a part of the ResolverMetadata.
message VerificationMethod {
  // A unique id of the verification method.
  optional string id = 1;

  // The public key used for the verification method.
  optional Jwk public_key_jwk = 2;
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/agntcy/identity-service/internal/pkg/iam"
	mock "github.com/stretchr/testify/mock"
)

// NewJwtVerifier creates a new instance of JwtVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJwtVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *JwtVerifier {
	mock := &JwtVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// JwtVerifier is an autogenerated mock type for the JwtVerifier type
type JwtVerifier struct {
	mock.Mock
}

type JwtVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *JwtVerifier) EXPECT() *JwtVerifier_Expecter {
	return &JwtVerifier_Expecter{mock: &_m.Mock}
}

// VerifyAccessToken provides a mock function for the type JwtVerifier
func (_mock *JwtVerifier) VerifyAccessToken(jwt string) (iam.Claims, error) {
	ret := _mock.Called(jwt)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAccessToken")
	}

	var r0 iam.Claims
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (iam.Claims, error)); ok {
		return returnFunc(jwt)
	}
	if returnFunc, ok := ret.Get(0).(func(string) iam.Claims); ok {
		r0 = returnFunc(jwt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iam.Claims)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(jwt)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// JwtVerifier_VerifyAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAccessToken'
type JwtVerifier_VerifyAccessToken_Call struct {
	*mock.Call
}

// VerifyAccessToken is a helper method to define mock.On call
//   - jwt string
func (_e *JwtVerifier_Expecter) VerifyAccessToken(jwt interface{}) *JwtVerifier_VerifyAccessToken_Call {
	return &JwtVerifier_VerifyAccessToken_Call{Call: _e.mock.On("VerifyAccessToken", jwt)}
}

func (_c *JwtVerifier_VerifyAccessToken_Call) Run(run func(jwt string)) *JwtVerifier_VerifyAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *JwtVerifier_VerifyAccessToken_Call) Return(claims iam.Claims, err error) *JwtVerifier_VerifyAccessToken_Call {
	_c.Call.Return(claims, err)
	return _c
}

func (_c *JwtVerifier_VerifyAccessToken_Call) RunAndReturn(run func(jwt string) (iam.Claims, error)) *JwtVerifier_VerifyAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

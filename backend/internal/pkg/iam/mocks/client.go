// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/outshift/identity-service/internal/pkg/iam"
	mock "github.com/stretchr/testify/mock"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// AuthApiKey provides a mock function for the type Client
func (_mock *Client) AuthApiKey(ctx context.Context, productID string, apiKey string, forApp bool) (context.Context, error) {
	ret := _mock.Called(ctx, productID, apiKey, forApp)

	if len(ret) == 0 {
		panic("no return value specified for AuthApiKey")
	}

	var r0 context.Context
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, bool) (context.Context, error)); ok {
		return returnFunc(ctx, productID, apiKey, forApp)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, bool) context.Context); ok {
		r0 = returnFunc(ctx, productID, apiKey, forApp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = returnFunc(ctx, productID, apiKey, forApp)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_AuthApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthApiKey'
type Client_AuthApiKey_Call struct {
	*mock.Call
}

// AuthApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - productID string
//   - apiKey string
//   - forApp bool
func (_e *Client_Expecter) AuthApiKey(ctx interface{}, productID interface{}, apiKey interface{}, forApp interface{}) *Client_AuthApiKey_Call {
	return &Client_AuthApiKey_Call{Call: _e.mock.On("AuthApiKey", ctx, productID, apiKey, forApp)}
}

func (_c *Client_AuthApiKey_Call) Run(run func(ctx context.Context, productID string, apiKey string, forApp bool)) *Client_AuthApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Client_AuthApiKey_Call) Return(newCtx context.Context, err error) *Client_AuthApiKey_Call {
	_c.Call.Return(newCtx, err)
	return _c
}

func (_c *Client_AuthApiKey_Call) RunAndReturn(run func(ctx context.Context, productID string, apiKey string, forApp bool) (context.Context, error)) *Client_AuthApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// AuthJwt provides a mock function for the type Client
func (_mock *Client) AuthJwt(ctx context.Context, header string) (context.Context, error) {
	ret := _mock.Called(ctx, header)

	if len(ret) == 0 {
		panic("no return value specified for AuthJwt")
	}

	var r0 context.Context
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (context.Context, error)); ok {
		return returnFunc(ctx, header)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = returnFunc(ctx, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, header)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_AuthJwt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthJwt'
type Client_AuthJwt_Call struct {
	*mock.Call
}

// AuthJwt is a helper method to define mock.On call
//   - ctx context.Context
//   - header string
func (_e *Client_Expecter) AuthJwt(ctx interface{}, header interface{}) *Client_AuthJwt_Call {
	return &Client_AuthJwt_Call{Call: _e.mock.On("AuthJwt", ctx, header)}
}

func (_c *Client_AuthJwt_Call) Run(run func(ctx context.Context, header string)) *Client_AuthJwt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_AuthJwt_Call) Return(newCtx context.Context, err error) *Client_AuthJwt_Call {
	_c.Call.Return(newCtx, err)
	return _c
}

func (_c *Client_AuthJwt_Call) RunAndReturn(run func(ctx context.Context, header string) (context.Context, error)) *Client_AuthJwt_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAppApiKey provides a mock function for the type Client
func (_mock *Client) CreateAppApiKey(ctx context.Context, appID string) (outshiftiam.ApiKey, error) {
	ret := _mock.Called(ctx, appID)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppApiKey")
	}

	var r0 outshiftiam.ApiKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (outshiftiam.ApiKey, error)); ok {
		return returnFunc(ctx, appID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) outshiftiam.ApiKey); ok {
		r0 = returnFunc(ctx, appID)
	} else {
		r0 = ret.Get(0).(outshiftiam.ApiKey)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, appID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_CreateAppApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAppApiKey'
type Client_CreateAppApiKey_Call struct {
	*mock.Call
}

// CreateAppApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
func (_e *Client_Expecter) CreateAppApiKey(ctx interface{}, appID interface{}) *Client_CreateAppApiKey_Call {
	return &Client_CreateAppApiKey_Call{Call: _e.mock.On("CreateAppApiKey", ctx, appID)}
}

func (_c *Client_CreateAppApiKey_Call) Run(run func(ctx context.Context, appID string)) *Client_CreateAppApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_CreateAppApiKey_Call) Return(apiKey outshiftiam.ApiKey, err error) *Client_CreateAppApiKey_Call {
	_c.Call.Return(apiKey, err)
	return _c
}

func (_c *Client_CreateAppApiKey_Call) RunAndReturn(run func(ctx context.Context, appID string) (outshiftiam.ApiKey, error)) *Client_CreateAppApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTenantApiKey provides a mock function for the type Client
func (_mock *Client) CreateTenantApiKey(ctx context.Context) (outshiftiam.ApiKey, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateTenantApiKey")
	}

	var r0 outshiftiam.ApiKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (outshiftiam.ApiKey, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) outshiftiam.ApiKey); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(outshiftiam.ApiKey)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_CreateTenantApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTenantApiKey'
type Client_CreateTenantApiKey_Call struct {
	*mock.Call
}

// CreateTenantApiKey is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) CreateTenantApiKey(ctx interface{}) *Client_CreateTenantApiKey_Call {
	return &Client_CreateTenantApiKey_Call{Call: _e.mock.On("CreateTenantApiKey", ctx)}
}

func (_c *Client_CreateTenantApiKey_Call) Run(run func(ctx context.Context)) *Client_CreateTenantApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_CreateTenantApiKey_Call) Return(apiKey outshiftiam.ApiKey, err error) *Client_CreateTenantApiKey_Call {
	_c.Call.Return(apiKey, err)
	return _c
}

func (_c *Client_CreateTenantApiKey_Call) RunAndReturn(run func(ctx context.Context) (outshiftiam.ApiKey, error)) *Client_CreateTenantApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppApiKey provides a mock function for the type Client
func (_mock *Client) GetAppApiKey(ctx context.Context, appID string) (outshiftiam.ApiKey, error) {
	ret := _mock.Called(ctx, appID)

	if len(ret) == 0 {
		panic("no return value specified for GetAppApiKey")
	}

	var r0 outshiftiam.ApiKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (outshiftiam.ApiKey, error)); ok {
		return returnFunc(ctx, appID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) outshiftiam.ApiKey); ok {
		r0 = returnFunc(ctx, appID)
	} else {
		r0 = ret.Get(0).(outshiftiam.ApiKey)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, appID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetAppApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppApiKey'
type Client_GetAppApiKey_Call struct {
	*mock.Call
}

// GetAppApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
func (_e *Client_Expecter) GetAppApiKey(ctx interface{}, appID interface{}) *Client_GetAppApiKey_Call {
	return &Client_GetAppApiKey_Call{Call: _e.mock.On("GetAppApiKey", ctx, appID)}
}

func (_c *Client_GetAppApiKey_Call) Run(run func(ctx context.Context, appID string)) *Client_GetAppApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_GetAppApiKey_Call) Return(apiKey outshiftiam.ApiKey, err error) *Client_GetAppApiKey_Call {
	_c.Call.Return(apiKey, err)
	return _c
}

func (_c *Client_GetAppApiKey_Call) RunAndReturn(run func(ctx context.Context, appID string) (outshiftiam.ApiKey, error)) *Client_GetAppApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetTenantApiKey provides a mock function for the type Client
func (_mock *Client) GetTenantApiKey(ctx context.Context) (outshiftiam.ApiKey, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTenantApiKey")
	}

	var r0 outshiftiam.ApiKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (outshiftiam.ApiKey, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) outshiftiam.ApiKey); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(outshiftiam.ApiKey)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetTenantApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantApiKey'
type Client_GetTenantApiKey_Call struct {
	*mock.Call
}

// GetTenantApiKey is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) GetTenantApiKey(ctx interface{}) *Client_GetTenantApiKey_Call {
	return &Client_GetTenantApiKey_Call{Call: _e.mock.On("GetTenantApiKey", ctx)}
}

func (_c *Client_GetTenantApiKey_Call) Run(run func(ctx context.Context)) *Client_GetTenantApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_GetTenantApiKey_Call) Return(apiKey outshiftiam.ApiKey, err error) *Client_GetTenantApiKey_Call {
	_c.Call.Return(apiKey, err)
	return _c
}

func (_c *Client_GetTenantApiKey_Call) RunAndReturn(run func(ctx context.Context) (outshiftiam.ApiKey, error)) *Client_GetTenantApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshAppApiKey provides a mock function for the type Client
func (_mock *Client) RefreshAppApiKey(ctx context.Context, appID string) (outshiftiam.ApiKey, error) {
	ret := _mock.Called(ctx, appID)

	if len(ret) == 0 {
		panic("no return value specified for RefreshAppApiKey")
	}

	var r0 outshiftiam.ApiKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (outshiftiam.ApiKey, error)); ok {
		return returnFunc(ctx, appID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) outshiftiam.ApiKey); ok {
		r0 = returnFunc(ctx, appID)
	} else {
		r0 = ret.Get(0).(outshiftiam.ApiKey)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, appID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_RefreshAppApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshAppApiKey'
type Client_RefreshAppApiKey_Call struct {
	*mock.Call
}

// RefreshAppApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
func (_e *Client_Expecter) RefreshAppApiKey(ctx interface{}, appID interface{}) *Client_RefreshAppApiKey_Call {
	return &Client_RefreshAppApiKey_Call{Call: _e.mock.On("RefreshAppApiKey", ctx, appID)}
}

func (_c *Client_RefreshAppApiKey_Call) Run(run func(ctx context.Context, appID string)) *Client_RefreshAppApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_RefreshAppApiKey_Call) Return(apiKey outshiftiam.ApiKey, err error) *Client_RefreshAppApiKey_Call {
	_c.Call.Return(apiKey, err)
	return _c
}

func (_c *Client_RefreshAppApiKey_Call) RunAndReturn(run func(ctx context.Context, appID string) (outshiftiam.ApiKey, error)) *Client_RefreshAppApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAppApiKey provides a mock function for the type Client
func (_mock *Client) RevokeAppApiKey(ctx context.Context, appID string) error {
	ret := _mock.Called(ctx, appID)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAppApiKey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, appID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_RevokeAppApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAppApiKey'
type Client_RevokeAppApiKey_Call struct {
	*mock.Call
}

// RevokeAppApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
func (_e *Client_Expecter) RevokeAppApiKey(ctx interface{}, appID interface{}) *Client_RevokeAppApiKey_Call {
	return &Client_RevokeAppApiKey_Call{Call: _e.mock.On("RevokeAppApiKey", ctx, appID)}
}

func (_c *Client_RevokeAppApiKey_Call) Run(run func(ctx context.Context, appID string)) *Client_RevokeAppApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_RevokeAppApiKey_Call) Return(err error) *Client_RevokeAppApiKey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_RevokeAppApiKey_Call) RunAndReturn(run func(ctx context.Context, appID string) error) *Client_RevokeAppApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeTenantApiKey provides a mock function for the type Client
func (_mock *Client) RevokeTenantApiKey(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RevokeTenantApiKey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_RevokeTenantApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeTenantApiKey'
type Client_RevokeTenantApiKey_Call struct {
	*mock.Call
}

// RevokeTenantApiKey is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) RevokeTenantApiKey(ctx interface{}) *Client_RevokeTenantApiKey_Call {
	return &Client_RevokeTenantApiKey_Call{Call: _e.mock.On("RevokeTenantApiKey", ctx)}
}

func (_c *Client_RevokeTenantApiKey_Call) Run(run func(ctx context.Context)) *Client_RevokeTenantApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_RevokeTenantApiKey_Call) Return(err error) *Client_RevokeTenantApiKey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_RevokeTenantApiKey_Call) RunAndReturn(run func(ctx context.Context) error) *Client_RevokeTenantApiKey_Call {
	_c.Call.Return(run)
	return _c
}

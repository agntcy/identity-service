// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/outshift/identity-service/internal/core/iam/types"
	mock "github.com/stretchr/testify/mock"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// AuthAPIKey provides a mock function for the type Client
func (_mock *Client) AuthAPIKey(ctx context.Context, apiKey string, forApp bool) (context.Context, error) {
	ret := _mock.Called(ctx, apiKey, forApp)

	if len(ret) == 0 {
		panic("no return value specified for AuthAPIKey")
	}

	var r0 context.Context
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) (context.Context, error)); ok {
		return returnFunc(ctx, apiKey, forApp)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) context.Context); ok {
		r0 = returnFunc(ctx, apiKey, forApp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = returnFunc(ctx, apiKey, forApp)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_AuthAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthAPIKey'
type Client_AuthAPIKey_Call struct {
	*mock.Call
}

// AuthAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - apiKey string
//   - forApp bool
func (_e *Client_Expecter) AuthAPIKey(ctx interface{}, apiKey interface{}, forApp interface{}) *Client_AuthAPIKey_Call {
	return &Client_AuthAPIKey_Call{Call: _e.mock.On("AuthAPIKey", ctx, apiKey, forApp)}
}

func (_c *Client_AuthAPIKey_Call) Run(run func(ctx context.Context, apiKey string, forApp bool)) *Client_AuthAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Client_AuthAPIKey_Call) Return(newCtx context.Context, err error) *Client_AuthAPIKey_Call {
	_c.Call.Return(newCtx, err)
	return _c
}

func (_c *Client_AuthAPIKey_Call) RunAndReturn(run func(ctx context.Context, apiKey string, forApp bool) (context.Context, error)) *Client_AuthAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// AuthJwt provides a mock function for the type Client
func (_mock *Client) AuthJwt(ctx context.Context, header string) (context.Context, error) {
	ret := _mock.Called(ctx, header)

	if len(ret) == 0 {
		panic("no return value specified for AuthJwt")
	}

	var r0 context.Context
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (context.Context, error)); ok {
		return returnFunc(ctx, header)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = returnFunc(ctx, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, header)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_AuthJwt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthJwt'
type Client_AuthJwt_Call struct {
	*mock.Call
}

// AuthJwt is a helper method to define mock.On call
//   - ctx context.Context
//   - header string
func (_e *Client_Expecter) AuthJwt(ctx interface{}, header interface{}) *Client_AuthJwt_Call {
	return &Client_AuthJwt_Call{Call: _e.mock.On("AuthJwt", ctx, header)}
}

func (_c *Client_AuthJwt_Call) Run(run func(ctx context.Context, header string)) *Client_AuthJwt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_AuthJwt_Call) Return(newCtx context.Context, err error) *Client_AuthJwt_Call {
	_c.Call.Return(newCtx, err)
	return _c
}

func (_c *Client_AuthJwt_Call) RunAndReturn(run func(ctx context.Context, header string) (context.Context, error)) *Client_AuthJwt_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAppAPIKey provides a mock function for the type Client
func (_mock *Client) CreateAppAPIKey(ctx context.Context, appID string) (*types.APIKey, error) {
	ret := _mock.Called(ctx, appID)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppAPIKey")
	}

	var r0 *types.APIKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*types.APIKey, error)); ok {
		return returnFunc(ctx, appID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *types.APIKey); ok {
		r0 = returnFunc(ctx, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.APIKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, appID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_CreateAppAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAppAPIKey'
type Client_CreateAppAPIKey_Call struct {
	*mock.Call
}

// CreateAppAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
func (_e *Client_Expecter) CreateAppAPIKey(ctx interface{}, appID interface{}) *Client_CreateAppAPIKey_Call {
	return &Client_CreateAppAPIKey_Call{Call: _e.mock.On("CreateAppAPIKey", ctx, appID)}
}

func (_c *Client_CreateAppAPIKey_Call) Run(run func(ctx context.Context, appID string)) *Client_CreateAppAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_CreateAppAPIKey_Call) Return(apiKey *types.APIKey, err error) *Client_CreateAppAPIKey_Call {
	_c.Call.Return(apiKey, err)
	return _c
}

func (_c *Client_CreateAppAPIKey_Call) RunAndReturn(run func(ctx context.Context, appID string) (*types.APIKey, error)) *Client_CreateAppAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTenantAPIKey provides a mock function for the type Client
func (_mock *Client) CreateTenantAPIKey(ctx context.Context) (*types.APIKey, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateTenantAPIKey")
	}

	var r0 *types.APIKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*types.APIKey, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *types.APIKey); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.APIKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_CreateTenantAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTenantAPIKey'
type Client_CreateTenantAPIKey_Call struct {
	*mock.Call
}

// CreateTenantAPIKey is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) CreateTenantAPIKey(ctx interface{}) *Client_CreateTenantAPIKey_Call {
	return &Client_CreateTenantAPIKey_Call{Call: _e.mock.On("CreateTenantAPIKey", ctx)}
}

func (_c *Client_CreateTenantAPIKey_Call) Run(run func(ctx context.Context)) *Client_CreateTenantAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_CreateTenantAPIKey_Call) Return(apiKey *types.APIKey, err error) *Client_CreateTenantAPIKey_Call {
	_c.Call.Return(apiKey, err)
	return _c
}

func (_c *Client_CreateTenantAPIKey_Call) RunAndReturn(run func(ctx context.Context) (*types.APIKey, error)) *Client_CreateTenantAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppAPIKey provides a mock function for the type Client
func (_mock *Client) GetAppAPIKey(ctx context.Context, appID string) (*types.APIKey, error) {
	ret := _mock.Called(ctx, appID)

	if len(ret) == 0 {
		panic("no return value specified for GetAppAPIKey")
	}

	var r0 *types.APIKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*types.APIKey, error)); ok {
		return returnFunc(ctx, appID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *types.APIKey); ok {
		r0 = returnFunc(ctx, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.APIKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, appID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetAppAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppAPIKey'
type Client_GetAppAPIKey_Call struct {
	*mock.Call
}

// GetAppAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
func (_e *Client_Expecter) GetAppAPIKey(ctx interface{}, appID interface{}) *Client_GetAppAPIKey_Call {
	return &Client_GetAppAPIKey_Call{Call: _e.mock.On("GetAppAPIKey", ctx, appID)}
}

func (_c *Client_GetAppAPIKey_Call) Run(run func(ctx context.Context, appID string)) *Client_GetAppAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_GetAppAPIKey_Call) Return(apiKey *types.APIKey, err error) *Client_GetAppAPIKey_Call {
	_c.Call.Return(apiKey, err)
	return _c
}

func (_c *Client_GetAppAPIKey_Call) RunAndReturn(run func(ctx context.Context, appID string) (*types.APIKey, error)) *Client_GetAppAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetTenantAPIKey provides a mock function for the type Client
func (_mock *Client) GetTenantAPIKey(ctx context.Context) (*types.APIKey, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTenantAPIKey")
	}

	var r0 *types.APIKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*types.APIKey, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *types.APIKey); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.APIKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetTenantAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantAPIKey'
type Client_GetTenantAPIKey_Call struct {
	*mock.Call
}

// GetTenantAPIKey is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) GetTenantAPIKey(ctx interface{}) *Client_GetTenantAPIKey_Call {
	return &Client_GetTenantAPIKey_Call{Call: _e.mock.On("GetTenantAPIKey", ctx)}
}

func (_c *Client_GetTenantAPIKey_Call) Run(run func(ctx context.Context)) *Client_GetTenantAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_GetTenantAPIKey_Call) Return(apiKey *types.APIKey, err error) *Client_GetTenantAPIKey_Call {
	_c.Call.Return(apiKey, err)
	return _c
}

func (_c *Client_GetTenantAPIKey_Call) RunAndReturn(run func(ctx context.Context) (*types.APIKey, error)) *Client_GetTenantAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshAppAPIKey provides a mock function for the type Client
func (_mock *Client) RefreshAppAPIKey(ctx context.Context, appID string) (*types.APIKey, error) {
	ret := _mock.Called(ctx, appID)

	if len(ret) == 0 {
		panic("no return value specified for RefreshAppAPIKey")
	}

	var r0 *types.APIKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*types.APIKey, error)); ok {
		return returnFunc(ctx, appID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *types.APIKey); ok {
		r0 = returnFunc(ctx, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.APIKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, appID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_RefreshAppAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshAppAPIKey'
type Client_RefreshAppAPIKey_Call struct {
	*mock.Call
}

// RefreshAppAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
func (_e *Client_Expecter) RefreshAppAPIKey(ctx interface{}, appID interface{}) *Client_RefreshAppAPIKey_Call {
	return &Client_RefreshAppAPIKey_Call{Call: _e.mock.On("RefreshAppAPIKey", ctx, appID)}
}

func (_c *Client_RefreshAppAPIKey_Call) Run(run func(ctx context.Context, appID string)) *Client_RefreshAppAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_RefreshAppAPIKey_Call) Return(apiKey *types.APIKey, err error) *Client_RefreshAppAPIKey_Call {
	_c.Call.Return(apiKey, err)
	return _c
}

func (_c *Client_RefreshAppAPIKey_Call) RunAndReturn(run func(ctx context.Context, appID string) (*types.APIKey, error)) *Client_RefreshAppAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAppAPIKey provides a mock function for the type Client
func (_mock *Client) RevokeAppAPIKey(ctx context.Context, appID string) error {
	ret := _mock.Called(ctx, appID)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAppAPIKey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, appID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_RevokeAppAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAppAPIKey'
type Client_RevokeAppAPIKey_Call struct {
	*mock.Call
}

// RevokeAppAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
func (_e *Client_Expecter) RevokeAppAPIKey(ctx interface{}, appID interface{}) *Client_RevokeAppAPIKey_Call {
	return &Client_RevokeAppAPIKey_Call{Call: _e.mock.On("RevokeAppAPIKey", ctx, appID)}
}

func (_c *Client_RevokeAppAPIKey_Call) Run(run func(ctx context.Context, appID string)) *Client_RevokeAppAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_RevokeAppAPIKey_Call) Return(err error) *Client_RevokeAppAPIKey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_RevokeAppAPIKey_Call) RunAndReturn(run func(ctx context.Context, appID string) error) *Client_RevokeAppAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeTenantAPIKey provides a mock function for the type Client
func (_mock *Client) RevokeTenantAPIKey(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RevokeTenantAPIKey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_RevokeTenantAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeTenantAPIKey'
type Client_RevokeTenantAPIKey_Call struct {
	*mock.Call
}

// RevokeTenantAPIKey is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) RevokeTenantAPIKey(ctx interface{}) *Client_RevokeTenantAPIKey_Call {
	return &Client_RevokeTenantAPIKey_Call{Call: _e.mock.On("RevokeTenantAPIKey", ctx)}
}

func (_c *Client_RevokeTenantAPIKey_Call) Run(run func(ctx context.Context)) *Client_RevokeTenantAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_RevokeTenantAPIKey_Call) Return(err error) *Client_RevokeTenantAPIKey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_RevokeTenantAPIKey_Call) RunAndReturn(run func(ctx context.Context) error) *Client_RevokeTenantAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

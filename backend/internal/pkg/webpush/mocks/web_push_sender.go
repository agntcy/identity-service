// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/outshift/identity-service/internal/pkg/webpush"
	mock "github.com/stretchr/testify/mock"
)

// NewWebPushSender creates a new instance of WebPushSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebPushSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebPushSender {
	mock := &WebPushSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// WebPushSender is an autogenerated mock type for the WebPushSender type
type WebPushSender struct {
	mock.Mock
}

type WebPushSender_Expecter struct {
	mock *mock.Mock
}

func (_m *WebPushSender) EXPECT() *WebPushSender_Expecter {
	return &WebPushSender_Expecter{mock: &_m.Mock}
}

// SendWebPushNotification provides a mock function for the type WebPushSender
func (_mock *WebPushSender) SendWebPushNotification(subscriptionToken string, notification any, options *webpush.Options) error {
	ret := _mock.Called(subscriptionToken, notification, options)

	if len(ret) == 0 {
		panic("no return value specified for SendWebPushNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, any, *webpush.Options) error); ok {
		r0 = returnFunc(subscriptionToken, notification, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// WebPushSender_SendWebPushNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWebPushNotification'
type WebPushSender_SendWebPushNotification_Call struct {
	*mock.Call
}

// SendWebPushNotification is a helper method to define mock.On call
//   - subscriptionToken string
//   - notification any
//   - options *webpush.Options
func (_e *WebPushSender_Expecter) SendWebPushNotification(subscriptionToken interface{}, notification interface{}, options interface{}) *WebPushSender_SendWebPushNotification_Call {
	return &WebPushSender_SendWebPushNotification_Call{Call: _e.mock.On("SendWebPushNotification", subscriptionToken, notification, options)}
}

func (_c *WebPushSender_SendWebPushNotification_Call) Run(run func(subscriptionToken string, notification any, options *webpush.Options)) *WebPushSender_SendWebPushNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 *webpush.Options
		if args[2] != nil {
			arg2 = args[2].(*webpush.Options)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *WebPushSender_SendWebPushNotification_Call) Return(err error) *WebPushSender_SendWebPushNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *WebPushSender_SendWebPushNotification_Call) RunAndReturn(run func(subscriptionToken string, notification any, options *webpush.Options) error) *WebPushSender_SendWebPushNotification_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewVaultClient creates a new instance of VaultClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVaultClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *VaultClient {
	mock := &VaultClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// VaultClient is an autogenerated mock type for the VaultClient type
type VaultClient struct {
	mock.Mock
}

type VaultClient_Expecter struct {
	mock *mock.Mock
}

func (_m *VaultClient) EXPECT() *VaultClient_Expecter {
	return &VaultClient_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type VaultClient
func (_mock *VaultClient) Delete(ctx context.Context, secretPath string) error {
	ret := _mock.Called(ctx, secretPath)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, secretPath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VaultClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type VaultClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - secretPath string
func (_e *VaultClient_Expecter) Delete(ctx interface{}, secretPath interface{}) *VaultClient_Delete_Call {
	return &VaultClient_Delete_Call{Call: _e.mock.On("Delete", ctx, secretPath)}
}

func (_c *VaultClient_Delete_Call) Run(run func(ctx context.Context, secretPath string)) *VaultClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VaultClient_Delete_Call) Return(err error) *VaultClient_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VaultClient_Delete_Call) RunAndReturn(run func(ctx context.Context, secretPath string) error) *VaultClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type VaultClient
func (_mock *VaultClient) Get(ctx context.Context, secretPath string) (map[string]any, error) {
	ret := _mock.Called(ctx, secretPath)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 map[string]any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (map[string]any, error)); ok {
		return returnFunc(ctx, secretPath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) map[string]any); ok {
		r0 = returnFunc(ctx, secretPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, secretPath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VaultClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type VaultClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - secretPath string
func (_e *VaultClient_Expecter) Get(ctx interface{}, secretPath interface{}) *VaultClient_Get_Call {
	return &VaultClient_Get_Call{Call: _e.mock.On("Get", ctx, secretPath)}
}

func (_c *VaultClient_Get_Call) Run(run func(ctx context.Context, secretPath string)) *VaultClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VaultClient_Get_Call) Return(stringToV map[string]any, err error) *VaultClient_Get_Call {
	_c.Call.Return(stringToV, err)
	return _c
}

func (_c *VaultClient_Get_Call) RunAndReturn(run func(ctx context.Context, secretPath string) (map[string]any, error)) *VaultClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type VaultClient
func (_mock *VaultClient) Put(ctx context.Context, secretPath string, data map[string]any) error {
	ret := _mock.Called(ctx, secretPath, data)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, map[string]any) error); ok {
		r0 = returnFunc(ctx, secretPath, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VaultClient_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type VaultClient_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - secretPath string
//   - data map[string]any
func (_e *VaultClient_Expecter) Put(ctx interface{}, secretPath interface{}, data interface{}) *VaultClient_Put_Call {
	return &VaultClient_Put_Call{Call: _e.mock.On("Put", ctx, secretPath, data)}
}

func (_c *VaultClient_Put_Call) Run(run func(ctx context.Context, secretPath string, data map[string]any)) *VaultClient_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 map[string]any
		if args[2] != nil {
			arg2 = args[2].(map[string]any)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *VaultClient_Put_Call) Return(err error) *VaultClient_Put_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VaultClient_Put_Call) RunAndReturn(run func(ctx context.Context, secretPath string, data map[string]any) error) *VaultClient_Put_Call {
	_c.Call.Return(run)
	return _c
}

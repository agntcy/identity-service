// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	types1 "github.com/outshift/identity-service/internal/core/app/types"
	types0 "github.com/outshift/identity-service/internal/core/auth/types/int"
	"github.com/outshift/identity-service/internal/core/device/types"
	mock "github.com/stretchr/testify/mock"
)

// NewNotificationService creates a new instance of NotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationService {
	mock := &NotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// NotificationService is an autogenerated mock type for the NotificationService type
type NotificationService struct {
	mock.Mock
}

type NotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationService) EXPECT() *NotificationService_Expecter {
	return &NotificationService_Expecter{mock: &_m.Mock}
}

// SendDeviceRegisteredNotification provides a mock function for the type NotificationService
func (_mock *NotificationService) SendDeviceRegisteredNotification(ctx context.Context, device *types.Device) error {
	ret := _mock.Called(ctx, device)

	if len(ret) == 0 {
		panic("no return value specified for SendDeviceRegisteredNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.Device) error); ok {
		r0 = returnFunc(ctx, device)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// NotificationService_SendDeviceRegisteredNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendDeviceRegisteredNotification'
type NotificationService_SendDeviceRegisteredNotification_Call struct {
	*mock.Call
}

// SendDeviceRegisteredNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - device *types.Device
func (_e *NotificationService_Expecter) SendDeviceRegisteredNotification(ctx interface{}, device interface{}) *NotificationService_SendDeviceRegisteredNotification_Call {
	return &NotificationService_SendDeviceRegisteredNotification_Call{Call: _e.mock.On("SendDeviceRegisteredNotification", ctx, device)}
}

func (_c *NotificationService_SendDeviceRegisteredNotification_Call) Run(run func(ctx context.Context, device *types.Device)) *NotificationService_SendDeviceRegisteredNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.Device
		if args[1] != nil {
			arg1 = args[1].(*types.Device)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *NotificationService_SendDeviceRegisteredNotification_Call) Return(err error) *NotificationService_SendDeviceRegisteredNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *NotificationService_SendDeviceRegisteredNotification_Call) RunAndReturn(run func(ctx context.Context, device *types.Device) error) *NotificationService_SendDeviceRegisteredNotification_Call {
	_c.Call.Return(run)
	return _c
}

// SendInfoNotification provides a mock function for the type NotificationService
func (_mock *NotificationService) SendInfoNotification(ctx context.Context, device *types.Device, message string) error {
	ret := _mock.Called(ctx, device, message)

	if len(ret) == 0 {
		panic("no return value specified for SendInfoNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.Device, string) error); ok {
		r0 = returnFunc(ctx, device, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// NotificationService_SendInfoNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendInfoNotification'
type NotificationService_SendInfoNotification_Call struct {
	*mock.Call
}

// SendInfoNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - device *types.Device
//   - message string
func (_e *NotificationService_Expecter) SendInfoNotification(ctx interface{}, device interface{}, message interface{}) *NotificationService_SendInfoNotification_Call {
	return &NotificationService_SendInfoNotification_Call{Call: _e.mock.On("SendInfoNotification", ctx, device, message)}
}

func (_c *NotificationService_SendInfoNotification_Call) Run(run func(ctx context.Context, device *types.Device, message string)) *NotificationService_SendInfoNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.Device
		if args[1] != nil {
			arg1 = args[1].(*types.Device)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *NotificationService_SendInfoNotification_Call) Return(err error) *NotificationService_SendInfoNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *NotificationService_SendInfoNotification_Call) RunAndReturn(run func(ctx context.Context, device *types.Device, message string) error) *NotificationService_SendInfoNotification_Call {
	_c.Call.Return(run)
	return _c
}

// SendOTPNotification provides a mock function for the type NotificationService
func (_mock *NotificationService) SendOTPNotification(ctx context.Context, device *types.Device, session *types0.Session, otp *types0.SessionDeviceOTP, callerApp *types1.App, calleeApp *types1.App, toolName *string) error {
	ret := _mock.Called(ctx, device, session, otp, callerApp, calleeApp, toolName)

	if len(ret) == 0 {
		panic("no return value specified for SendOTPNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.Device, *types0.Session, *types0.SessionDeviceOTP, *types1.App, *types1.App, *string) error); ok {
		r0 = returnFunc(ctx, device, session, otp, callerApp, calleeApp, toolName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// NotificationService_SendOTPNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendOTPNotification'
type NotificationService_SendOTPNotification_Call struct {
	*mock.Call
}

// SendOTPNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - device *types.Device
//   - session *types0.Session
//   - otp *types0.SessionDeviceOTP
//   - callerApp *types1.App
//   - calleeApp *types1.App
//   - toolName *string
func (_e *NotificationService_Expecter) SendOTPNotification(ctx interface{}, device interface{}, session interface{}, otp interface{}, callerApp interface{}, calleeApp interface{}, toolName interface{}) *NotificationService_SendOTPNotification_Call {
	return &NotificationService_SendOTPNotification_Call{Call: _e.mock.On("SendOTPNotification", ctx, device, session, otp, callerApp, calleeApp, toolName)}
}

func (_c *NotificationService_SendOTPNotification_Call) Run(run func(ctx context.Context, device *types.Device, session *types0.Session, otp *types0.SessionDeviceOTP, callerApp *types1.App, calleeApp *types1.App, toolName *string)) *NotificationService_SendOTPNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.Device
		if args[1] != nil {
			arg1 = args[1].(*types.Device)
		}
		var arg2 *types0.Session
		if args[2] != nil {
			arg2 = args[2].(*types0.Session)
		}
		var arg3 *types0.SessionDeviceOTP
		if args[3] != nil {
			arg3 = args[3].(*types0.SessionDeviceOTP)
		}
		var arg4 *types1.App
		if args[4] != nil {
			arg4 = args[4].(*types1.App)
		}
		var arg5 *types1.App
		if args[5] != nil {
			arg5 = args[5].(*types1.App)
		}
		var arg6 *string
		if args[6] != nil {
			arg6 = args[6].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *NotificationService_SendOTPNotification_Call) Return(err error) *NotificationService_SendOTPNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *NotificationService_SendOTPNotification_Call) RunAndReturn(run func(ctx context.Context, device *types.Device, session *types0.Session, otp *types0.SessionDeviceOTP, callerApp *types1.App, calleeApp *types1.App, toolName *string) error) *NotificationService_SendOTPNotification_Call {
	_c.Call.Return(run)
	return _c
}

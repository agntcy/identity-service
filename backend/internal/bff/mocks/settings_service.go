// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/agntcy/identity-service/internal/core/settings/types"
	mock "github.com/stretchr/testify/mock"
)

// NewSettingsService creates a new instance of SettingsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSettingsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SettingsService {
	mock := &SettingsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SettingsService is an autogenerated mock type for the SettingsService type
type SettingsService struct {
	mock.Mock
}

type SettingsService_Expecter struct {
	mock *mock.Mock
}

func (_m *SettingsService) EXPECT() *SettingsService_Expecter {
	return &SettingsService_Expecter{mock: &_m.Mock}
}

// GetSettings provides a mock function for the type SettingsService
func (_mock *SettingsService) GetSettings(ctx context.Context) (*types.Settings, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSettings")
	}

	var r0 *types.Settings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*types.Settings, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *types.Settings); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Settings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SettingsService_GetSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSettings'
type SettingsService_GetSettings_Call struct {
	*mock.Call
}

// GetSettings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SettingsService_Expecter) GetSettings(ctx interface{}) *SettingsService_GetSettings_Call {
	return &SettingsService_GetSettings_Call{Call: _e.mock.On("GetSettings", ctx)}
}

func (_c *SettingsService_GetSettings_Call) Run(run func(ctx context.Context)) *SettingsService_GetSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SettingsService_GetSettings_Call) Return(settings *types.Settings, err error) *SettingsService_GetSettings_Call {
	_c.Call.Return(settings, err)
	return _c
}

func (_c *SettingsService_GetSettings_Call) RunAndReturn(run func(ctx context.Context) (*types.Settings, error)) *SettingsService_GetSettings_Call {
	_c.Call.Return(run)
	return _c
}

// SetApiKey provides a mock function for the type SettingsService
func (_mock *SettingsService) SetApiKey(ctx context.Context) (*types.ApiKey, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SetApiKey")
	}

	var r0 *types.ApiKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*types.ApiKey, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *types.ApiKey); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ApiKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SettingsService_SetApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetApiKey'
type SettingsService_SetApiKey_Call struct {
	*mock.Call
}

// SetApiKey is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SettingsService_Expecter) SetApiKey(ctx interface{}) *SettingsService_SetApiKey_Call {
	return &SettingsService_SetApiKey_Call{Call: _e.mock.On("SetApiKey", ctx)}
}

func (_c *SettingsService_SetApiKey_Call) Run(run func(ctx context.Context)) *SettingsService_SetApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SettingsService_SetApiKey_Call) Return(apiKey *types.ApiKey, err error) *SettingsService_SetApiKey_Call {
	_c.Call.Return(apiKey, err)
	return _c
}

func (_c *SettingsService_SetApiKey_Call) RunAndReturn(run func(ctx context.Context) (*types.ApiKey, error)) *SettingsService_SetApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// SetIssuerSettings provides a mock function for the type SettingsService
func (_mock *SettingsService) SetIssuerSettings(ctx context.Context, issuerSettings *types.IssuerSettings) (*types.IssuerSettings, error) {
	ret := _mock.Called(ctx, issuerSettings)

	if len(ret) == 0 {
		panic("no return value specified for SetIssuerSettings")
	}

	var r0 *types.IssuerSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.IssuerSettings) (*types.IssuerSettings, error)); ok {
		return returnFunc(ctx, issuerSettings)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.IssuerSettings) *types.IssuerSettings); ok {
		r0 = returnFunc(ctx, issuerSettings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.IssuerSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.IssuerSettings) error); ok {
		r1 = returnFunc(ctx, issuerSettings)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SettingsService_SetIssuerSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetIssuerSettings'
type SettingsService_SetIssuerSettings_Call struct {
	*mock.Call
}

// SetIssuerSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - issuerSettings *types.IssuerSettings
func (_e *SettingsService_Expecter) SetIssuerSettings(ctx interface{}, issuerSettings interface{}) *SettingsService_SetIssuerSettings_Call {
	return &SettingsService_SetIssuerSettings_Call{Call: _e.mock.On("SetIssuerSettings", ctx, issuerSettings)}
}

func (_c *SettingsService_SetIssuerSettings_Call) Run(run func(ctx context.Context, issuerSettings *types.IssuerSettings)) *SettingsService_SetIssuerSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.IssuerSettings
		if args[1] != nil {
			arg1 = args[1].(*types.IssuerSettings)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SettingsService_SetIssuerSettings_Call) Return(issuerSettings1 *types.IssuerSettings, err error) *SettingsService_SetIssuerSettings_Call {
	_c.Call.Return(issuerSettings1, err)
	return _c
}

func (_c *SettingsService_SetIssuerSettings_Call) RunAndReturn(run func(ctx context.Context, issuerSettings *types.IssuerSettings) (*types.IssuerSettings, error)) *SettingsService_SetIssuerSettings_Call {
	_c.Call.Return(run)
	return _c
}

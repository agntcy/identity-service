// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/outshift/identity-service/internal/core/badge/types"
	"github.com/outshift/identity-service/internal/core/identity"
	"github.com/outshift/identity-service/internal/core/idp"
	mock "github.com/stretchr/testify/mock"
)

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// GenerateID provides a mock function for the type Service
func (_mock *Service) GenerateID(ctx context.Context, clientCredentials *idp.ClientCredentials, issuer *identity.Issuer) (string, error) {
	ret := _mock.Called(ctx, clientCredentials, issuer)

	if len(ret) == 0 {
		panic("no return value specified for GenerateID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *idp.ClientCredentials, *identity.Issuer) (string, error)); ok {
		return returnFunc(ctx, clientCredentials, issuer)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *idp.ClientCredentials, *identity.Issuer) string); ok {
		r0 = returnFunc(ctx, clientCredentials, issuer)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *idp.ClientCredentials, *identity.Issuer) error); ok {
		r1 = returnFunc(ctx, clientCredentials, issuer)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Service_GenerateID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateID'
type Service_GenerateID_Call struct {
	*mock.Call
}

// GenerateID is a helper method to define mock.On call
//   - ctx context.Context
//   - clientCredentials *idp.ClientCredentials
//   - issuer *identity.Issuer
func (_e *Service_Expecter) GenerateID(ctx interface{}, clientCredentials interface{}, issuer interface{}) *Service_GenerateID_Call {
	return &Service_GenerateID_Call{Call: _e.mock.On("GenerateID", ctx, clientCredentials, issuer)}
}

func (_c *Service_GenerateID_Call) Run(run func(ctx context.Context, clientCredentials *idp.ClientCredentials, issuer *identity.Issuer)) *Service_GenerateID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *idp.ClientCredentials
		if args[1] != nil {
			arg1 = args[1].(*idp.ClientCredentials)
		}
		var arg2 *identity.Issuer
		if args[2] != nil {
			arg2 = args[2].(*identity.Issuer)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Service_GenerateID_Call) Return(s string, err error) *Service_GenerateID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Service_GenerateID_Call) RunAndReturn(run func(ctx context.Context, clientCredentials *idp.ClientCredentials, issuer *identity.Issuer) (string, error)) *Service_GenerateID_Call {
	_c.Call.Return(run)
	return _c
}

// PublishVerifiableCredential provides a mock function for the type Service
func (_mock *Service) PublishVerifiableCredential(ctx context.Context, clientCredentials *idp.ClientCredentials, vc *types.VerifiableCredential, issuer *identity.Issuer) error {
	ret := _mock.Called(ctx, clientCredentials, vc, issuer)

	if len(ret) == 0 {
		panic("no return value specified for PublishVerifiableCredential")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *idp.ClientCredentials, *types.VerifiableCredential, *identity.Issuer) error); ok {
		r0 = returnFunc(ctx, clientCredentials, vc, issuer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Service_PublishVerifiableCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishVerifiableCredential'
type Service_PublishVerifiableCredential_Call struct {
	*mock.Call
}

// PublishVerifiableCredential is a helper method to define mock.On call
//   - ctx context.Context
//   - clientCredentials *idp.ClientCredentials
//   - vc *types.VerifiableCredential
//   - issuer *identity.Issuer
func (_e *Service_Expecter) PublishVerifiableCredential(ctx interface{}, clientCredentials interface{}, vc interface{}, issuer interface{}) *Service_PublishVerifiableCredential_Call {
	return &Service_PublishVerifiableCredential_Call{Call: _e.mock.On("PublishVerifiableCredential", ctx, clientCredentials, vc, issuer)}
}

func (_c *Service_PublishVerifiableCredential_Call) Run(run func(ctx context.Context, clientCredentials *idp.ClientCredentials, vc *types.VerifiableCredential, issuer *identity.Issuer)) *Service_PublishVerifiableCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *idp.ClientCredentials
		if args[1] != nil {
			arg1 = args[1].(*idp.ClientCredentials)
		}
		var arg2 *types.VerifiableCredential
		if args[2] != nil {
			arg2 = args[2].(*types.VerifiableCredential)
		}
		var arg3 *identity.Issuer
		if args[3] != nil {
			arg3 = args[3].(*identity.Issuer)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Service_PublishVerifiableCredential_Call) Return(err error) *Service_PublishVerifiableCredential_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Service_PublishVerifiableCredential_Call) RunAndReturn(run func(ctx context.Context, clientCredentials *idp.ClientCredentials, vc *types.VerifiableCredential, issuer *identity.Issuer) error) *Service_PublishVerifiableCredential_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterIssuer provides a mock function for the type Service
func (_mock *Service) RegisterIssuer(ctx context.Context, clientCredentials *idp.ClientCredentials, organizationID string) (*identity.Issuer, error) {
	ret := _mock.Called(ctx, clientCredentials, organizationID)

	if len(ret) == 0 {
		panic("no return value specified for RegisterIssuer")
	}

	var r0 *identity.Issuer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *idp.ClientCredentials, string) (*identity.Issuer, error)); ok {
		return returnFunc(ctx, clientCredentials, organizationID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *idp.ClientCredentials, string) *identity.Issuer); ok {
		r0 = returnFunc(ctx, clientCredentials, organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Issuer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *idp.ClientCredentials, string) error); ok {
		r1 = returnFunc(ctx, clientCredentials, organizationID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Service_RegisterIssuer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterIssuer'
type Service_RegisterIssuer_Call struct {
	*mock.Call
}

// RegisterIssuer is a helper method to define mock.On call
//   - ctx context.Context
//   - clientCredentials *idp.ClientCredentials
//   - organizationID string
func (_e *Service_Expecter) RegisterIssuer(ctx interface{}, clientCredentials interface{}, organizationID interface{}) *Service_RegisterIssuer_Call {
	return &Service_RegisterIssuer_Call{Call: _e.mock.On("RegisterIssuer", ctx, clientCredentials, organizationID)}
}

func (_c *Service_RegisterIssuer_Call) Run(run func(ctx context.Context, clientCredentials *idp.ClientCredentials, organizationID string)) *Service_RegisterIssuer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *idp.ClientCredentials
		if args[1] != nil {
			arg1 = args[1].(*idp.ClientCredentials)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Service_RegisterIssuer_Call) Return(issuer *identity.Issuer, err error) *Service_RegisterIssuer_Call {
	_c.Call.Return(issuer, err)
	return _c
}

func (_c *Service_RegisterIssuer_Call) RunAndReturn(run func(ctx context.Context, clientCredentials *idp.ClientCredentials, organizationID string) (*identity.Issuer, error)) *Service_RegisterIssuer_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeVerifiableCredential provides a mock function for the type Service
func (_mock *Service) RevokeVerifiableCredential(ctx context.Context, clientCredentials *idp.ClientCredentials, vc *types.VerifiableCredential, issuer *identity.Issuer) error {
	ret := _mock.Called(ctx, clientCredentials, vc, issuer)

	if len(ret) == 0 {
		panic("no return value specified for RevokeVerifiableCredential")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *idp.ClientCredentials, *types.VerifiableCredential, *identity.Issuer) error); ok {
		r0 = returnFunc(ctx, clientCredentials, vc, issuer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Service_RevokeVerifiableCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeVerifiableCredential'
type Service_RevokeVerifiableCredential_Call struct {
	*mock.Call
}

// RevokeVerifiableCredential is a helper method to define mock.On call
//   - ctx context.Context
//   - clientCredentials *idp.ClientCredentials
//   - vc *types.VerifiableCredential
//   - issuer *identity.Issuer
func (_e *Service_Expecter) RevokeVerifiableCredential(ctx interface{}, clientCredentials interface{}, vc interface{}, issuer interface{}) *Service_RevokeVerifiableCredential_Call {
	return &Service_RevokeVerifiableCredential_Call{Call: _e.mock.On("RevokeVerifiableCredential", ctx, clientCredentials, vc, issuer)}
}

func (_c *Service_RevokeVerifiableCredential_Call) Run(run func(ctx context.Context, clientCredentials *idp.ClientCredentials, vc *types.VerifiableCredential, issuer *identity.Issuer)) *Service_RevokeVerifiableCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *idp.ClientCredentials
		if args[1] != nil {
			arg1 = args[1].(*idp.ClientCredentials)
		}
		var arg2 *types.VerifiableCredential
		if args[2] != nil {
			arg2 = args[2].(*types.VerifiableCredential)
		}
		var arg3 *identity.Issuer
		if args[3] != nil {
			arg3 = args[3].(*identity.Issuer)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Service_RevokeVerifiableCredential_Call) Return(err error) *Service_RevokeVerifiableCredential_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Service_RevokeVerifiableCredential_Call) RunAndReturn(run func(ctx context.Context, clientCredentials *idp.ClientCredentials, vc *types.VerifiableCredential, issuer *identity.Issuer) error) *Service_RevokeVerifiableCredential_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyVerifiableCredential provides a mock function for the type Service
func (_mock *Service) VerifyVerifiableCredential(ctx context.Context, vc *string) (*types.VerificationResult, error) {
	ret := _mock.Called(ctx, vc)

	if len(ret) == 0 {
		panic("no return value specified for VerifyVerifiableCredential")
	}

	var r0 *types.VerificationResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string) (*types.VerificationResult, error)); ok {
		return returnFunc(ctx, vc)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string) *types.VerificationResult); ok {
		r0 = returnFunc(ctx, vc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.VerificationResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = returnFunc(ctx, vc)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Service_VerifyVerifiableCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyVerifiableCredential'
type Service_VerifyVerifiableCredential_Call struct {
	*mock.Call
}

// VerifyVerifiableCredential is a helper method to define mock.On call
//   - ctx context.Context
//   - vc *string
func (_e *Service_Expecter) VerifyVerifiableCredential(ctx interface{}, vc interface{}) *Service_VerifyVerifiableCredential_Call {
	return &Service_VerifyVerifiableCredential_Call{Call: _e.mock.On("VerifyVerifiableCredential", ctx, vc)}
}

func (_c *Service_VerifyVerifiableCredential_Call) Run(run func(ctx context.Context, vc *string)) *Service_VerifyVerifiableCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *string
		if args[1] != nil {
			arg1 = args[1].(*string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Service_VerifyVerifiableCredential_Call) Return(verificationResult *types.VerificationResult, err error) *Service_VerifyVerifiableCredential_Call {
	_c.Call.Return(verificationResult, err)
	return _c
}

func (_c *Service_VerifyVerifiableCredential_Call) RunAndReturn(run func(ctx context.Context, vc *string) (*types.VerificationResult, error)) *Service_VerifyVerifiableCredential_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/outshift/identity-service/internal/core/settings/types"
	mock "github.com/stretchr/testify/mock"
)

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// GetIssuerSettings provides a mock function for the type Repository
func (_mock *Repository) GetIssuerSettings(ctx context.Context) (*types.IssuerSettings, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetIssuerSettings")
	}

	var r0 *types.IssuerSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*types.IssuerSettings, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *types.IssuerSettings); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.IssuerSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Repository_GetIssuerSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssuerSettings'
type Repository_GetIssuerSettings_Call struct {
	*mock.Call
}

// GetIssuerSettings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) GetIssuerSettings(ctx interface{}) *Repository_GetIssuerSettings_Call {
	return &Repository_GetIssuerSettings_Call{Call: _e.mock.On("GetIssuerSettings", ctx)}
}

func (_c *Repository_GetIssuerSettings_Call) Run(run func(ctx context.Context)) *Repository_GetIssuerSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Repository_GetIssuerSettings_Call) Return(issuerSettings *types.IssuerSettings, err error) *Repository_GetIssuerSettings_Call {
	_c.Call.Return(issuerSettings, err)
	return _c
}

func (_c *Repository_GetIssuerSettings_Call) RunAndReturn(run func(ctx context.Context) (*types.IssuerSettings, error)) *Repository_GetIssuerSettings_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIssuerSettings provides a mock function for the type Repository
func (_mock *Repository) UpdateIssuerSettings(ctx context.Context, issuerSettings *types.IssuerSettings) (*types.IssuerSettings, error) {
	ret := _mock.Called(ctx, issuerSettings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssuerSettings")
	}

	var r0 *types.IssuerSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.IssuerSettings) (*types.IssuerSettings, error)); ok {
		return returnFunc(ctx, issuerSettings)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.IssuerSettings) *types.IssuerSettings); ok {
		r0 = returnFunc(ctx, issuerSettings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.IssuerSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.IssuerSettings) error); ok {
		r1 = returnFunc(ctx, issuerSettings)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Repository_UpdateIssuerSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIssuerSettings'
type Repository_UpdateIssuerSettings_Call struct {
	*mock.Call
}

// UpdateIssuerSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - issuerSettings *types.IssuerSettings
func (_e *Repository_Expecter) UpdateIssuerSettings(ctx interface{}, issuerSettings interface{}) *Repository_UpdateIssuerSettings_Call {
	return &Repository_UpdateIssuerSettings_Call{Call: _e.mock.On("UpdateIssuerSettings", ctx, issuerSettings)}
}

func (_c *Repository_UpdateIssuerSettings_Call) Run(run func(ctx context.Context, issuerSettings *types.IssuerSettings)) *Repository_UpdateIssuerSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.IssuerSettings
		if args[1] != nil {
			arg1 = args[1].(*types.IssuerSettings)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Repository_UpdateIssuerSettings_Call) Return(issuerSettings1 *types.IssuerSettings, err error) *Repository_UpdateIssuerSettings_Call {
	_c.Call.Return(issuerSettings1, err)
	return _c
}

func (_c *Repository_UpdateIssuerSettings_Call) RunAndReturn(run func(ctx context.Context, issuerSettings *types.IssuerSettings) (*types.IssuerSettings, error)) *Repository_UpdateIssuerSettings_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/agntcy/identity-service/internal/core/settings/types"
	mock "github.com/stretchr/testify/mock"
)

// NewIssuerService creates a new instance of IssuerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIssuerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IssuerService {
	mock := &IssuerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IssuerService is an autogenerated mock type for the IssuerService type
type IssuerService struct {
	mock.Mock
}

type IssuerService_Expecter struct {
	mock *mock.Mock
}

func (_m *IssuerService) EXPECT() *IssuerService_Expecter {
	return &IssuerService_Expecter{mock: &_m.Mock}
}

// SetIssuer provides a mock function for the type IssuerService
func (_mock *IssuerService) SetIssuer(ctx context.Context, issuerSettings *types.IssuerSettings) error {
	ret := _mock.Called(ctx, issuerSettings)

	if len(ret) == 0 {
		panic("no return value specified for SetIssuer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.IssuerSettings) error); ok {
		r0 = returnFunc(ctx, issuerSettings)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IssuerService_SetIssuer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetIssuer'
type IssuerService_SetIssuer_Call struct {
	*mock.Call
}

// SetIssuer is a helper method to define mock.On call
//   - ctx context.Context
//   - issuerSettings *types.IssuerSettings
func (_e *IssuerService_Expecter) SetIssuer(ctx interface{}, issuerSettings interface{}) *IssuerService_SetIssuer_Call {
	return &IssuerService_SetIssuer_Call{Call: _e.mock.On("SetIssuer", ctx, issuerSettings)}
}

func (_c *IssuerService_SetIssuer_Call) Run(run func(ctx context.Context, issuerSettings *types.IssuerSettings)) *IssuerService_SetIssuer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.IssuerSettings
		if args[1] != nil {
			arg1 = args[1].(*types.IssuerSettings)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IssuerService_SetIssuer_Call) Return(err error) *IssuerService_SetIssuer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IssuerService_SetIssuer_Call) RunAndReturn(run func(ctx context.Context, issuerSettings *types.IssuerSettings) error) *IssuerService_SetIssuer_Call {
	_c.Call.Return(run)
	return _c
}

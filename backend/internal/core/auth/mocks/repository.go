// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/outshift/identity-service/internal/core/auth/types/int"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, session
func (_m *Repository) Create(ctx context.Context, session *types.Session) (*types.Session, error) {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *types.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Session) (*types.Session, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.Session) *types.Session); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.Session) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - session *types.Session
func (_e *Repository_Expecter) Create(ctx interface{}, session interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", ctx, session)}
}

func (_c *Repository_Create_Call) Run(run func(ctx context.Context, session *types.Session)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.Session))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 *types.Session, _a1 error) *Repository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(context.Context, *types.Session) (*types.Session, error)) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDeviceOTP provides a mock function with given fields: ctx, otp
func (_m *Repository) CreateDeviceOTP(ctx context.Context, otp *types.SessionDeviceOTP) error {
	ret := _m.Called(ctx, otp)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeviceOTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SessionDeviceOTP) error); ok {
		r0 = rf(ctx, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_CreateDeviceOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeviceOTP'
type Repository_CreateDeviceOTP_Call struct {
	*mock.Call
}

// CreateDeviceOTP is a helper method to define mock.On call
//   - ctx context.Context
//   - otp *types.SessionDeviceOTP
func (_e *Repository_Expecter) CreateDeviceOTP(ctx interface{}, otp interface{}) *Repository_CreateDeviceOTP_Call {
	return &Repository_CreateDeviceOTP_Call{Call: _e.mock.On("CreateDeviceOTP", ctx, otp)}
}

func (_c *Repository_CreateDeviceOTP_Call) Run(run func(ctx context.Context, otp *types.SessionDeviceOTP)) *Repository_CreateDeviceOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SessionDeviceOTP))
	})
	return _c
}

func (_c *Repository_CreateDeviceOTP_Call) Return(_a0 error) *Repository_CreateDeviceOTP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_CreateDeviceOTP_Call) RunAndReturn(run func(context.Context, *types.SessionDeviceOTP) error) *Repository_CreateDeviceOTP_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAccessToken provides a mock function with given fields: ctx, accessToken
func (_m *Repository) GetByAccessToken(ctx context.Context, accessToken string) (*types.Session, error) {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for GetByAccessToken")
	}

	var r0 *types.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Session, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Session); ok {
		r0 = rf(ctx, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetByAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAccessToken'
type Repository_GetByAccessToken_Call struct {
	*mock.Call
}

// GetByAccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
func (_e *Repository_Expecter) GetByAccessToken(ctx interface{}, accessToken interface{}) *Repository_GetByAccessToken_Call {
	return &Repository_GetByAccessToken_Call{Call: _e.mock.On("GetByAccessToken", ctx, accessToken)}
}

func (_c *Repository_GetByAccessToken_Call) Run(run func(ctx context.Context, accessToken string)) *Repository_GetByAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetByAccessToken_Call) Return(_a0 *types.Session, _a1 error) *Repository_GetByAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetByAccessToken_Call) RunAndReturn(run func(context.Context, string) (*types.Session, error)) *Repository_GetByAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAuthorizationCode provides a mock function with given fields: ctx, code
func (_m *Repository) GetByAuthorizationCode(ctx context.Context, code string) (*types.Session, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetByAuthorizationCode")
	}

	var r0 *types.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Session, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Session); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetByAuthorizationCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAuthorizationCode'
type Repository_GetByAuthorizationCode_Call struct {
	*mock.Call
}

// GetByAuthorizationCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *Repository_Expecter) GetByAuthorizationCode(ctx interface{}, code interface{}) *Repository_GetByAuthorizationCode_Call {
	return &Repository_GetByAuthorizationCode_Call{Call: _e.mock.On("GetByAuthorizationCode", ctx, code)}
}

func (_c *Repository_GetByAuthorizationCode_Call) Run(run func(ctx context.Context, code string)) *Repository_GetByAuthorizationCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetByAuthorizationCode_Call) Return(_a0 *types.Session, _a1 error) *Repository_GetByAuthorizationCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetByAuthorizationCode_Call) RunAndReturn(run func(context.Context, string) (*types.Session, error)) *Repository_GetByAuthorizationCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceOTP provides a mock function with given fields: ctx, id
func (_m *Repository) GetDeviceOTP(ctx context.Context, id string) (*types.SessionDeviceOTP, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceOTP")
	}

	var r0 *types.SessionDeviceOTP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.SessionDeviceOTP, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.SessionDeviceOTP); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SessionDeviceOTP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetDeviceOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceOTP'
type Repository_GetDeviceOTP_Call struct {
	*mock.Call
}

// GetDeviceOTP is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Repository_Expecter) GetDeviceOTP(ctx interface{}, id interface{}) *Repository_GetDeviceOTP_Call {
	return &Repository_GetDeviceOTP_Call{Call: _e.mock.On("GetDeviceOTP", ctx, id)}
}

func (_c *Repository_GetDeviceOTP_Call) Run(run func(ctx context.Context, id string)) *Repository_GetDeviceOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetDeviceOTP_Call) Return(_a0 *types.SessionDeviceOTP, _a1 error) *Repository_GetDeviceOTP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetDeviceOTP_Call) RunAndReturn(run func(context.Context, string) (*types.SessionDeviceOTP, error)) *Repository_GetDeviceOTP_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceOTPByValue provides a mock function with given fields: ctx, deviceID, sessionID, value
func (_m *Repository) GetDeviceOTPByValue(ctx context.Context, deviceID string, sessionID string, value string) (*types.SessionDeviceOTP, error) {
	ret := _m.Called(ctx, deviceID, sessionID, value)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceOTPByValue")
	}

	var r0 *types.SessionDeviceOTP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*types.SessionDeviceOTP, error)); ok {
		return rf(ctx, deviceID, sessionID, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *types.SessionDeviceOTP); ok {
		r0 = rf(ctx, deviceID, sessionID, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SessionDeviceOTP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, deviceID, sessionID, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetDeviceOTPByValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceOTPByValue'
type Repository_GetDeviceOTPByValue_Call struct {
	*mock.Call
}

// GetDeviceOTPByValue is a helper method to define mock.On call
//   - ctx context.Context
//   - deviceID string
//   - sessionID string
//   - value string
func (_e *Repository_Expecter) GetDeviceOTPByValue(ctx interface{}, deviceID interface{}, sessionID interface{}, value interface{}) *Repository_GetDeviceOTPByValue_Call {
	return &Repository_GetDeviceOTPByValue_Call{Call: _e.mock.On("GetDeviceOTPByValue", ctx, deviceID, sessionID, value)}
}

func (_c *Repository_GetDeviceOTPByValue_Call) Run(run func(ctx context.Context, deviceID string, sessionID string, value string)) *Repository_GetDeviceOTPByValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Repository_GetDeviceOTPByValue_Call) Return(_a0 *types.SessionDeviceOTP, _a1 error) *Repository_GetDeviceOTPByValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetDeviceOTPByValue_Call) RunAndReturn(run func(context.Context, string, string, string) (*types.SessionDeviceOTP, error)) *Repository_GetDeviceOTPByValue_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, session
func (_m *Repository) Update(ctx context.Context, session *types.Session) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - session *types.Session
func (_e *Repository_Expecter) Update(ctx interface{}, session interface{}) *Repository_Update_Call {
	return &Repository_Update_Call{Call: _e.mock.On("Update", ctx, session)}
}

func (_c *Repository_Update_Call) Run(run func(ctx context.Context, session *types.Session)) *Repository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.Session))
	})
	return _c
}

func (_c *Repository_Update_Call) Return(_a0 error) *Repository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Update_Call) RunAndReturn(run func(context.Context, *types.Session) error) *Repository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeviceOTP provides a mock function with given fields: ctx, otp
func (_m *Repository) UpdateDeviceOTP(ctx context.Context, otp *types.SessionDeviceOTP) error {
	ret := _m.Called(ctx, otp)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceOTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SessionDeviceOTP) error); ok {
		r0 = rf(ctx, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UpdateDeviceOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeviceOTP'
type Repository_UpdateDeviceOTP_Call struct {
	*mock.Call
}

// UpdateDeviceOTP is a helper method to define mock.On call
//   - ctx context.Context
//   - otp *types.SessionDeviceOTP
func (_e *Repository_Expecter) UpdateDeviceOTP(ctx interface{}, otp interface{}) *Repository_UpdateDeviceOTP_Call {
	return &Repository_UpdateDeviceOTP_Call{Call: _e.mock.On("UpdateDeviceOTP", ctx, otp)}
}

func (_c *Repository_UpdateDeviceOTP_Call) Run(run func(ctx context.Context, otp *types.SessionDeviceOTP)) *Repository_UpdateDeviceOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SessionDeviceOTP))
	})
	return _c
}

func (_c *Repository_UpdateDeviceOTP_Call) Return(_a0 error) *Repository_UpdateDeviceOTP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_UpdateDeviceOTP_Call) RunAndReturn(run func(context.Context, *types.SessionDeviceOTP) error) *Repository_UpdateDeviceOTP_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

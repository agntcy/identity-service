// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/agntcy/identity-service/internal/core/identity"
	"github.com/agntcy/identity-service/internal/core/idp"
	"github.com/agntcy/identity/pkg/jwk"
	mock "github.com/stretchr/testify/mock"
)

// NewRevoker creates a new instance of Revoker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRevoker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Revoker {
	mock := &Revoker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Revoker is an autogenerated mock type for the Revoker type
type Revoker struct {
	mock.Mock
}

type Revoker_Expecter struct {
	mock *mock.Mock
}

func (_m *Revoker) EXPECT() *Revoker_Expecter {
	return &Revoker_Expecter{mock: &_m.Mock}
}

// RevokeAll provides a mock function for the type Revoker
func (_mock *Revoker) RevokeAll(ctx context.Context, appID string, clientCredentials *idp.ClientCredentials, issuer *identity.Issuer, privKey *jwk.Jwk) error {
	ret := _mock.Called(ctx, appID, clientCredentials, issuer, privKey)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *idp.ClientCredentials, *identity.Issuer, *jwk.Jwk) error); ok {
		r0 = returnFunc(ctx, appID, clientCredentials, issuer, privKey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Revoker_RevokeAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAll'
type Revoker_RevokeAll_Call struct {
	*mock.Call
}

// RevokeAll is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
//   - clientCredentials *idp.ClientCredentials
//   - issuer *identity.Issuer
//   - privKey *jwk.Jwk
func (_e *Revoker_Expecter) RevokeAll(ctx interface{}, appID interface{}, clientCredentials interface{}, issuer interface{}, privKey interface{}) *Revoker_RevokeAll_Call {
	return &Revoker_RevokeAll_Call{Call: _e.mock.On("RevokeAll", ctx, appID, clientCredentials, issuer, privKey)}
}

func (_c *Revoker_RevokeAll_Call) Run(run func(ctx context.Context, appID string, clientCredentials *idp.ClientCredentials, issuer *identity.Issuer, privKey *jwk.Jwk)) *Revoker_RevokeAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *idp.ClientCredentials
		if args[2] != nil {
			arg2 = args[2].(*idp.ClientCredentials)
		}
		var arg3 *identity.Issuer
		if args[3] != nil {
			arg3 = args[3].(*identity.Issuer)
		}
		var arg4 *jwk.Jwk
		if args[4] != nil {
			arg4 = args[4].(*jwk.Jwk)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *Revoker_RevokeAll_Call) Return(err error) *Revoker_RevokeAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Revoker_RevokeAll_Call) RunAndReturn(run func(ctx context.Context, appID string, clientCredentials *idp.ClientCredentials, issuer *identity.Issuer, privKey *jwk.Jwk) error) *Revoker_RevokeAll_Call {
	_c.Call.Return(run)
	return _c
}

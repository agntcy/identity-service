// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewDiscoveryClient creates a new instance of DiscoveryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDiscoveryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DiscoveryClient {
	mock := &DiscoveryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DiscoveryClient is an autogenerated mock type for the DiscoveryClient type
type DiscoveryClient struct {
	mock.Mock
}

type DiscoveryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *DiscoveryClient) EXPECT() *DiscoveryClient_Expecter {
	return &DiscoveryClient_Expecter{mock: &_m.Mock}
}

// Discover provides a mock function for the type DiscoveryClient
func (_mock *DiscoveryClient) Discover(ctx context.Context, wellKnownUrl string) (string, error) {
	ret := _mock.Called(ctx, wellKnownUrl)

	if len(ret) == 0 {
		panic("no return value specified for Discover")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, wellKnownUrl)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, wellKnownUrl)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, wellKnownUrl)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DiscoveryClient_Discover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Discover'
type DiscoveryClient_Discover_Call struct {
	*mock.Call
}

// Discover is a helper method to define mock.On call
//   - ctx context.Context
//   - wellKnownUrl string
func (_e *DiscoveryClient_Expecter) Discover(ctx interface{}, wellKnownUrl interface{}) *DiscoveryClient_Discover_Call {
	return &DiscoveryClient_Discover_Call{Call: _e.mock.On("Discover", ctx, wellKnownUrl)}
}

func (_c *DiscoveryClient_Discover_Call) Run(run func(ctx context.Context, wellKnownUrl string)) *DiscoveryClient_Discover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DiscoveryClient_Discover_Call) Return(s string, err error) *DiscoveryClient_Discover_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *DiscoveryClient_Discover_Call) RunAndReturn(run func(ctx context.Context, wellKnownUrl string) (string, error)) *DiscoveryClient_Discover_Call {
	_c.Call.Return(run)
	return _c
}

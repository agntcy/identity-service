// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/agntcy/identity-service/internal/core/badge/mcp"
	mock "github.com/stretchr/testify/mock"
)

// NewDiscoveryClient creates a new instance of DiscoveryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDiscoveryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DiscoveryClient {
	mock := &DiscoveryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DiscoveryClient is an autogenerated mock type for the DiscoveryClient type
type DiscoveryClient struct {
	mock.Mock
}

type DiscoveryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *DiscoveryClient) EXPECT() *DiscoveryClient_Expecter {
	return &DiscoveryClient_Expecter{mock: &_m.Mock}
}

// AutoDiscover provides a mock function for the type DiscoveryClient
func (_mock *DiscoveryClient) AutoDiscover(ctx context.Context, name string, url string) (*mcp.McpServer, error) {
	ret := _mock.Called(ctx, name, url)

	if len(ret) == 0 {
		panic("no return value specified for AutoDiscover")
	}

	var r0 *mcp.McpServer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*mcp.McpServer, error)); ok {
		return returnFunc(ctx, name, url)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *mcp.McpServer); ok {
		r0 = returnFunc(ctx, name, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mcp.McpServer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, name, url)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DiscoveryClient_AutoDiscover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutoDiscover'
type DiscoveryClient_AutoDiscover_Call struct {
	*mock.Call
}

// AutoDiscover is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - url string
func (_e *DiscoveryClient_Expecter) AutoDiscover(ctx interface{}, name interface{}, url interface{}) *DiscoveryClient_AutoDiscover_Call {
	return &DiscoveryClient_AutoDiscover_Call{Call: _e.mock.On("AutoDiscover", ctx, name, url)}
}

func (_c *DiscoveryClient_AutoDiscover_Call) Run(run func(ctx context.Context, name string, url string)) *DiscoveryClient_AutoDiscover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *DiscoveryClient_AutoDiscover_Call) Return(mcpServer *mcp.McpServer, err error) *DiscoveryClient_AutoDiscover_Call {
	_c.Call.Return(mcpServer, err)
	return _c
}

func (_c *DiscoveryClient_AutoDiscover_Call) RunAndReturn(run func(ctx context.Context, name string, url string) (*mcp.McpServer, error)) *DiscoveryClient_AutoDiscover_Call {
	_c.Call.Return(run)
	return _c
}

// Discover provides a mock function for the type DiscoveryClient
func (_mock *DiscoveryClient) Discover(ctx context.Context, name string, url string, clientType string) (*mcp.McpServer, error) {
	ret := _mock.Called(ctx, name, url, clientType)

	if len(ret) == 0 {
		panic("no return value specified for Discover")
	}

	var r0 *mcp.McpServer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (*mcp.McpServer, error)); ok {
		return returnFunc(ctx, name, url, clientType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) *mcp.McpServer); ok {
		r0 = returnFunc(ctx, name, url, clientType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mcp.McpServer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, name, url, clientType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DiscoveryClient_Discover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Discover'
type DiscoveryClient_Discover_Call struct {
	*mock.Call
}

// Discover is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - url string
//   - clientType string
func (_e *DiscoveryClient_Expecter) Discover(ctx interface{}, name interface{}, url interface{}, clientType interface{}) *DiscoveryClient_Discover_Call {
	return &DiscoveryClient_Discover_Call{Call: _e.mock.On("Discover", ctx, name, url, clientType)}
}

func (_c *DiscoveryClient_Discover_Call) Run(run func(ctx context.Context, name string, url string, clientType string)) *DiscoveryClient_Discover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *DiscoveryClient_Discover_Call) Return(mcpServer *mcp.McpServer, err error) *DiscoveryClient_Discover_Call {
	_c.Call.Return(mcpServer, err)
	return _c
}

func (_c *DiscoveryClient_Discover_Call) RunAndReturn(run func(ctx context.Context, name string, url string, clientType string) (*mcp.McpServer, error)) *DiscoveryClient_Discover_Call {
	_c.Call.Return(run)
	return _c
}

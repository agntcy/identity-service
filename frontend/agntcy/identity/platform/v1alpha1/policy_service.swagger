{
  "swagger": "2.0",
  "info": {
    "title": "agntcy/identity/service/v1alpha1/policy_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Policy"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1alpha1/policies": {
      "get": {
        "summary": "List Policies",
        "operationId": "ListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "The current page of the pagination",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "The page size of the pagination",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "description": "The search query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appIds",
            "description": "A filter used to fetch policies only for the specified Agentic Services",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "rulesForAppIds",
            "description": "A filter used to fetch policies where the rules applies for the specified Agentic Services",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "post": {
        "summary": "Create Policy",
        "operationId": "CreatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1CreatePolicyRequest"
            }
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/v1alpha1/policies/all/count": {
      "get": {
        "summary": "Get policies total count.",
        "operationId": "GetPoliciesCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetPoliciesCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Policy"
        ]
      }
    },
    "/v1alpha1/policies/{policyId}": {
      "get": {
        "summary": "Get Policy by Id",
        "operationId": "GetPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "description": "Policy Id to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "delete": {
        "summary": "Delete Policy",
        "operationId": "DeletePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "description": "Policy Id to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "patch": {
        "summary": "Update Policy",
        "operationId": "UpdatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "description": "Policy Id to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyServiceUpdatePolicyBody"
            }
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/v1alpha1/policies/{policyId}/rules": {
      "get": {
        "summary": "List Rules",
        "operationId": "ListRules",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListRulesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "description": "The Policy Id to which these Rules belong.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "The current page of the pagination",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "The page size of the pagination",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "description": "The search query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "post": {
        "summary": "Create Rule",
        "operationId": "CreateRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Rule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "description": "The Policy Id to which these Rules belong.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyServiceCreateRuleBody"
            }
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/v1alpha1/policies/{policyId}/rules/{ruleId}": {
      "get": {
        "summary": "Get Rule by Id",
        "operationId": "GetRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Rule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "description": "The Policy Id to which these Rules belong.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "description": "Rule Id to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "delete": {
        "summary": "Delete Rule",
        "operationId": "DeleteRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "description": "The Policy Id to which these Rules belong.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "description": "Rule Id to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "patch": {
        "summary": "Update Rule",
        "operationId": "UpdateRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Rule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "description": "The Policy Id to which these Rules belong.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "description": "Rule Id to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyServiceUpdateRuleBody"
            }
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    }
  },
  "definitions": {
    "PolicyServiceCreateRuleBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A human-readable name for the Rule."
        },
        "description": {
          "type": "string",
          "description": "A human-readable description for the Rule."
        },
        "tasks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The tasks that this Rule applies to."
        },
        "needsApproval": {
          "type": "boolean",
          "description": "Need User Approval for this Rule."
        },
        "action": {
          "$ref": "#/definitions/v1alpha1RuleAction",
          "title": "The action applied for the rule when calling the tasks"
        }
      }
    },
    "PolicyServiceUpdatePolicyBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A human-readable name for the Policy."
        },
        "description": {
          "type": "string",
          "description": "A human-readable description for the Policy."
        },
        "assignedTo": {
          "type": "string",
          "description": "The requester application that this policy applies to."
        }
      }
    },
    "PolicyServiceUpdateRuleBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A human-readable name for the Rule."
        },
        "description": {
          "type": "string",
          "description": "A human-readable description for the Rule."
        },
        "tasks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The tasks that this Rule applies to."
        },
        "needsApproval": {
          "type": "boolean",
          "description": "Need User Approval for this Rule."
        },
        "action": {
          "$ref": "#/definitions/v1alpha1RuleAction",
          "title": "The action applied for the rule when calling the tasks"
        }
      }
    },
    "googleprotobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/googleprotobufAny"
          }
        }
      }
    },
    "v1alpha1CreatePolicyRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A human-readable name for the Policy."
        },
        "description": {
          "type": "string",
          "description": "A human-readable description for the Policy."
        },
        "assignedTo": {
          "type": "string",
          "description": "The requester application that this policy applies to."
        }
      }
    },
    "v1alpha1GetPoliciesCountResponse": {
      "type": "object",
      "properties": {
        "total": {
          "type": "string",
          "format": "int64",
          "title": "The total count"
        }
      }
    },
    "v1alpha1ListPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Policy"
          },
          "description": "A list of Policies."
        },
        "pagination": {
          "$ref": "#/definitions/v1alpha1PagedResponse",
          "description": "Pagination response."
        }
      }
    },
    "v1alpha1ListRulesResponse": {
      "type": "object",
      "properties": {
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Rule"
          },
          "description": "A list of Rules."
        },
        "pagination": {
          "$ref": "#/definitions/v1alpha1PagedResponse",
          "description": "Pagination response."
        }
      }
    },
    "v1alpha1PagedResponse": {
      "type": "object",
      "properties": {
        "nextPage": {
          "type": "integer",
          "format": "int32",
          "title": "Next page"
        },
        "hasNextPage": {
          "type": "boolean",
          "title": "Has next page"
        },
        "total": {
          "type": "string",
          "format": "int64",
          "title": "The total size of items"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "The size of the current page"
        }
      },
      "title": "Pagination response"
    },
    "v1alpha1Policy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for the Policy."
        },
        "name": {
          "type": "string",
          "description": "A human-readable name for the Policy."
        },
        "description": {
          "type": "string",
          "description": "A human-readable description for the Policy."
        },
        "assignedTo": {
          "type": "string",
          "description": "The requester application that this Policy applies to."
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Rule"
          },
          "description": "All the rules that apply to this Policy."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "CreatedAt records the timestamp of when the Policy was initially created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "UpdatedAt records the timestamp of the last update to the Policy"
        }
      },
      "description": "Identity Service Policy."
    },
    "v1alpha1Rule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for the Rule."
        },
        "name": {
          "type": "string",
          "description": "A human-readable name for the Rule."
        },
        "description": {
          "type": "string",
          "description": "A human-readable description for the Rule."
        },
        "policyId": {
          "type": "string"
        },
        "tasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Task"
          },
          "description": "The tasks that this Rule applies to."
        },
        "action": {
          "$ref": "#/definitions/v1alpha1RuleAction",
          "title": "The action applied for the rule when calling the specified tasks"
        },
        "needsApproval": {
          "type": "boolean",
          "description": "Need User Approval for this Rule."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "CreatedAt records the timestamp of when the Rule was initially created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "UpdatedAt records the timestamp of the last update to the Rule"
        }
      },
      "title": "Identity Service Policy Rule"
    },
    "v1alpha1RuleAction": {
      "type": "string",
      "enum": [
        "RULE_ACTION_UNSPECIFIED",
        "RULE_ACTION_ALLOW",
        "RULE_ACTION_DENY"
      ],
      "default": "RULE_ACTION_UNSPECIFIED"
    },
    "v1alpha1Task": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for the Task."
        },
        "name": {
          "type": "string",
          "description": "A human-readable name for the Task."
        },
        "description": {
          "type": "string",
          "description": "A human-readable description for the Task."
        },
        "appId": {
          "type": "string",
          "description": "An application ID for the Task."
        },
        "toolName": {
          "type": "string",
          "description": "A tool name for the Task."
        }
      },
      "title": "Identity Service Policy Task"
    }
  }
}

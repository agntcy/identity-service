# Copyright 2025 Cisco Systems, Inc. and its affiliates
# SPDX-License-Identifier: Apache-2.0

---
name: sonarqube scan
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  packages: write
jobs:
  ################################## SonarQube  Scan ##############################
  #################################################################################
  sonar-go-tests-and-scan:
    name: Go tests + SonarQube scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@c0137caad775660c0844396c52da96e560aba63d # v5
        with:
          go-version-file: backend/go.mod
          cache: true
          cache-dependency-path: backend/go.sum

      - name: Run Go tests with coverage
        working-directory: backend
        run: |
          go test ./... -covermode=atomic -coverprofile=coverage.out

      - name: Normalize Go coverage paths (module -> repo paths)
        working-directory: backend
        run: |
          MODULE_PATH=$(go list -m)
          echo "Detected Go module: ${MODULE_PATH}"
          sed -i "s#${MODULE_PATH}/#backend/#g" coverage.out

      - name: Prepare frontend env for Yarn
        working-directory: frontend
        run: |
          # Ensure .env exists because Yarn injects env from .env via .yarnrc.yml
          if [ ! -f .env ]; then
            if [ -f .env.sample ]; then
              cp .env.sample .env
            else
              touch .env
            fi
          fi
          if grep -q '^NPM_TOKEN=' .env; then
            sed -i "s#^NPM_TOKEN=.*#NPM_TOKEN=${{ secrets.GITHUB_TOKEN }}#" .env
          else
            echo 'NPM_TOKEN=${{ secrets.GITHUB_TOKEN }}' >> .env
          fi

      - name: Set up Node (for frontend tests)
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v4
        with:
          node-version: 22
          cache: "yarn"
          cache-dependency-path: frontend/yarn.lock

      - name: Install frontend dependencies
        working-directory: frontend
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          corepack enable
          yarn install --frozen-lockfile || yarn install

      - name: Run frontend tests with coverage (Vitest)
        working-directory: frontend
        run: |
          yarn test:coverage

      - name: Import Vault Secret
        uses: hashicorp/vault-action@4c06c5ccf5c0761b6029f56cfb1dcf5565918a3b # v3.4.0
        with:
          url: ${{ vars.KEEPER_URL }}
          method: approle
          roleId: ${{ secrets.VAULT_APPROLE_ROLE_ID }}
          secretId: ${{ secrets.VAULT_APPROLE_SECRET_ID }}
          namespace: ${{ vars.VAULT_NAMESPACE }}
          secrets: |
            ${{ vars.VAULT_SECRET_PATH }}  SONAR_CLOUD_URL   | SONAR_URL ;
            ${{ vars.VAULT_SECRET_PATH }}  SONAR_CLOUD_TOKEN | SONAR_TOKEN

      - name: SonarQube scan
        uses: sonarsource/sonarqube-scan-action@1a6d90ebcb0e6a6b1d87e37ba693fe453195ae25 # v5
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_URL }}
        with:
          args: -Dproject.settings=.github/linters/sonar-project.properties

# Copyright 2025 Copyright AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from agntcy.identity.platform.v1alpha1 import device_pb2 as agntcy_dot_identity_dot_platform_dot_v1alpha1_dot_device__pb2
from agntcy.identity.platform.v1alpha1 import device_service_pb2 as agntcy_dot_identity_dot_platform_dot_v1alpha1_dot_device__service__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class DeviceServiceStub(object):
    """DeviceService manages device.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddDevice = channel.unary_unary(
                '/agntcy.identity.platform.v1alpha1.DeviceService/AddDevice',
                request_serializer=agntcy_dot_identity_dot_platform_dot_v1alpha1_dot_device__service__pb2.AddDeviceRequest.SerializeToString,
                response_deserializer=agntcy_dot_identity_dot_platform_dot_v1alpha1_dot_device__pb2.Device.FromString,
                _registered_method=True)
        self.RegisterDevice = channel.unary_unary(
                '/agntcy.identity.platform.v1alpha1.DeviceService/RegisterDevice',
                request_serializer=agntcy_dot_identity_dot_platform_dot_v1alpha1_dot_device__service__pb2.RegisterDeviceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class DeviceServiceServicer(object):
    """DeviceService manages device.
    """

    def AddDevice(self, request, context):
        """Add new device for approval flow
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterDevice(self, request, context):
        """Add new device for approval flow
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeviceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.AddDevice,
                    request_deserializer=agntcy_dot_identity_dot_platform_dot_v1alpha1_dot_device__service__pb2.AddDeviceRequest.FromString,
                    response_serializer=agntcy_dot_identity_dot_platform_dot_v1alpha1_dot_device__pb2.Device.SerializeToString,
            ),
            'RegisterDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterDevice,
                    request_deserializer=agntcy_dot_identity_dot_platform_dot_v1alpha1_dot_device__service__pb2.RegisterDeviceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agntcy.identity.platform.v1alpha1.DeviceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agntcy.identity.platform.v1alpha1.DeviceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DeviceService(object):
    """DeviceService manages device.
    """

    @staticmethod
    def AddDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agntcy.identity.platform.v1alpha1.DeviceService/AddDevice',
            agntcy_dot_identity_dot_platform_dot_v1alpha1_dot_device__service__pb2.AddDeviceRequest.SerializeToString,
            agntcy_dot_identity_dot_platform_dot_v1alpha1_dot_device__pb2.Device.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agntcy.identity.platform.v1alpha1.DeviceService/RegisterDevice',
            agntcy_dot_identity_dot_platform_dot_v1alpha1_dot_device__service__pb2.RegisterDeviceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

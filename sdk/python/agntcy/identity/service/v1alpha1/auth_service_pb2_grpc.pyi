"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2025 AGNTCY Contributors (https://github.com/agntcy)
SPDX-License-Identifier: Apache-2.0
"""

import abc
import agntcy.identity.service.v1alpha1.auth_service_pb2
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AuthServiceStub:
    """AuthService manages auth."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    AppInfo: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        agntcy.identity.service.v1alpha1.auth_service_pb2.AppInfoResponse,
    ]
    """App info endpoint"""

    Authorize: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.auth_service_pb2.AuthorizeRequest,
        agntcy.identity.service.v1alpha1.auth_service_pb2.AuthorizeResponse,
    ]
    """Authorize a request from an Agent or MCP Server"""

    Token: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.auth_service_pb2.TokenRequest,
        agntcy.identity.service.v1alpha1.auth_service_pb2.TokenResponse,
    ]
    """Request token for an Agent or MCP Server"""

    ExtAuthz: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.auth_service_pb2.ExtAuthzRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Handle external authorization requests"""

    ApproveToken: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.auth_service_pb2.ApproveTokenRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Handle manual approval of external authorization requets"""

class AuthServiceAsyncStub:
    """AuthService manages auth."""

    AppInfo: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        agntcy.identity.service.v1alpha1.auth_service_pb2.AppInfoResponse,
    ]
    """App info endpoint"""

    Authorize: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.auth_service_pb2.AuthorizeRequest,
        agntcy.identity.service.v1alpha1.auth_service_pb2.AuthorizeResponse,
    ]
    """Authorize a request from an Agent or MCP Server"""

    Token: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.auth_service_pb2.TokenRequest,
        agntcy.identity.service.v1alpha1.auth_service_pb2.TokenResponse,
    ]
    """Request token for an Agent or MCP Server"""

    ExtAuthz: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.auth_service_pb2.ExtAuthzRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Handle external authorization requests"""

    ApproveToken: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.auth_service_pb2.ApproveTokenRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Handle manual approval of external authorization requets"""

class AuthServiceServicer(metaclass=abc.ABCMeta):
    """AuthService manages auth."""

    @abc.abstractmethod
    def AppInfo(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.auth_service_pb2.AppInfoResponse, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.auth_service_pb2.AppInfoResponse]]:
        """App info endpoint"""

    @abc.abstractmethod
    def Authorize(
        self,
        request: agntcy.identity.service.v1alpha1.auth_service_pb2.AuthorizeRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.auth_service_pb2.AuthorizeResponse, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.auth_service_pb2.AuthorizeResponse]]:
        """Authorize a request from an Agent or MCP Server"""

    @abc.abstractmethod
    def Token(
        self,
        request: agntcy.identity.service.v1alpha1.auth_service_pb2.TokenRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.auth_service_pb2.TokenResponse, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.auth_service_pb2.TokenResponse]]:
        """Request token for an Agent or MCP Server"""

    @abc.abstractmethod
    def ExtAuthz(
        self,
        request: agntcy.identity.service.v1alpha1.auth_service_pb2.ExtAuthzRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Handle external authorization requests"""

    @abc.abstractmethod
    def ApproveToken(
        self,
        request: agntcy.identity.service.v1alpha1.auth_service_pb2.ApproveTokenRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Handle manual approval of external authorization requets"""

def add_AuthServiceServicer_to_server(servicer: AuthServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

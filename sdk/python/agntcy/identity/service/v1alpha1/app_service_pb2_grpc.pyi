"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2025 AGNTCY Contributors (https://github.com/agntcy)
SPDX-License-Identifier: Apache-2.0
"""

import abc
import agntcy.identity.service.v1alpha1.app_pb2
import agntcy.identity.service.v1alpha1.app_service_pb2
import agntcy.identity.service.v1alpha1.badge_pb2
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AppServiceStub:
    """AppService manages apps."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListApps: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.ListAppsRequest,
        agntcy.identity.service.v1alpha1.app_service_pb2.ListAppsResponse,
    ]
    """List Apps."""

    GetAppsCount: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.GetAppsCountRequest,
        agntcy.identity.service.v1alpha1.app_service_pb2.GetAppsCountResponse,
    ]
    """Get apps count per type."""

    GetApp: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.GetAppRequest,
        agntcy.identity.service.v1alpha1.app_pb2.App,
    ]
    """Get App by id"""

    CreateApp: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.CreateAppRequest,
        agntcy.identity.service.v1alpha1.app_pb2.App,
    ]
    """Create a new App."""

    CreateOasfApp: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.CreateOasfAppRequest,
        agntcy.identity.service.v1alpha1.app_service_pb2.CreateOasfAppResponse,
    ]

    UpdateApp: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.UpdateAppRequest,
        agntcy.identity.service.v1alpha1.app_pb2.App,
    ]
    """Update an App."""

    DeleteApp: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.DeleteAppRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Delete an existing App."""

    RefreshAppApiKey: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.RefreshAppApiKeyRequest,
        agntcy.identity.service.v1alpha1.app_pb2.App,
    ]
    """Refresh the api-key for an App."""

    GetBadge: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.GetBadgeRequest,
        agntcy.identity.service.v1alpha1.badge_pb2.Badge,
    ]
    """Get the current badge issued for the App."""

    GetTasks: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.GetTasksRequest,
        agntcy.identity.service.v1alpha1.app_service_pb2.GetTasksResponse,
    ]
    """Get the list of tasks of all apps"""

class AppServiceAsyncStub:
    """AppService manages apps."""

    ListApps: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.ListAppsRequest,
        agntcy.identity.service.v1alpha1.app_service_pb2.ListAppsResponse,
    ]
    """List Apps."""

    GetAppsCount: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.GetAppsCountRequest,
        agntcy.identity.service.v1alpha1.app_service_pb2.GetAppsCountResponse,
    ]
    """Get apps count per type."""

    GetApp: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.GetAppRequest,
        agntcy.identity.service.v1alpha1.app_pb2.App,
    ]
    """Get App by id"""

    CreateApp: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.CreateAppRequest,
        agntcy.identity.service.v1alpha1.app_pb2.App,
    ]
    """Create a new App."""

    CreateOasfApp: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.CreateOasfAppRequest,
        agntcy.identity.service.v1alpha1.app_service_pb2.CreateOasfAppResponse,
    ]

    UpdateApp: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.UpdateAppRequest,
        agntcy.identity.service.v1alpha1.app_pb2.App,
    ]
    """Update an App."""

    DeleteApp: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.DeleteAppRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Delete an existing App."""

    RefreshAppApiKey: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.RefreshAppApiKeyRequest,
        agntcy.identity.service.v1alpha1.app_pb2.App,
    ]
    """Refresh the api-key for an App."""

    GetBadge: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.GetBadgeRequest,
        agntcy.identity.service.v1alpha1.badge_pb2.Badge,
    ]
    """Get the current badge issued for the App."""

    GetTasks: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.app_service_pb2.GetTasksRequest,
        agntcy.identity.service.v1alpha1.app_service_pb2.GetTasksResponse,
    ]
    """Get the list of tasks of all apps"""

class AppServiceServicer(metaclass=abc.ABCMeta):
    """AppService manages apps."""

    @abc.abstractmethod
    def ListApps(
        self,
        request: agntcy.identity.service.v1alpha1.app_service_pb2.ListAppsRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.app_service_pb2.ListAppsResponse, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.app_service_pb2.ListAppsResponse]]:
        """List Apps."""

    @abc.abstractmethod
    def GetAppsCount(
        self,
        request: agntcy.identity.service.v1alpha1.app_service_pb2.GetAppsCountRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.app_service_pb2.GetAppsCountResponse, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.app_service_pb2.GetAppsCountResponse]]:
        """Get apps count per type."""

    @abc.abstractmethod
    def GetApp(
        self,
        request: agntcy.identity.service.v1alpha1.app_service_pb2.GetAppRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.app_pb2.App, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.app_pb2.App]]:
        """Get App by id"""

    @abc.abstractmethod
    def CreateApp(
        self,
        request: agntcy.identity.service.v1alpha1.app_service_pb2.CreateAppRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.app_pb2.App, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.app_pb2.App]]:
        """Create a new App."""

    @abc.abstractmethod
    def CreateOasfApp(
        self,
        request: agntcy.identity.service.v1alpha1.app_service_pb2.CreateOasfAppRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.app_service_pb2.CreateOasfAppResponse, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.app_service_pb2.CreateOasfAppResponse]]: ...

    @abc.abstractmethod
    def UpdateApp(
        self,
        request: agntcy.identity.service.v1alpha1.app_service_pb2.UpdateAppRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.app_pb2.App, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.app_pb2.App]]:
        """Update an App."""

    @abc.abstractmethod
    def DeleteApp(
        self,
        request: agntcy.identity.service.v1alpha1.app_service_pb2.DeleteAppRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Delete an existing App."""

    @abc.abstractmethod
    def RefreshAppApiKey(
        self,
        request: agntcy.identity.service.v1alpha1.app_service_pb2.RefreshAppApiKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.app_pb2.App, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.app_pb2.App]]:
        """Refresh the api-key for an App."""

    @abc.abstractmethod
    def GetBadge(
        self,
        request: agntcy.identity.service.v1alpha1.app_service_pb2.GetBadgeRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.badge_pb2.Badge, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.badge_pb2.Badge]]:
        """Get the current badge issued for the App."""

    @abc.abstractmethod
    def GetTasks(
        self,
        request: agntcy.identity.service.v1alpha1.app_service_pb2.GetTasksRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.app_service_pb2.GetTasksResponse, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.app_service_pb2.GetTasksResponse]]:
        """Get the list of tasks of all apps"""

def add_AppServiceServicer_to_server(servicer: AppServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

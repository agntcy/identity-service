"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2025 AGNTCY Contributors (https://github.com/agntcy)
SPDX-License-Identifier: Apache-2.0
"""

import abc
import agntcy.identity.service.v1alpha1.policy_pb2
import agntcy.identity.service.v1alpha1.policy_service_pb2
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class PolicyServiceStub:
    """PolicyService manages policy."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListPolicies: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.ListPoliciesRequest,
        agntcy.identity.service.v1alpha1.policy_service_pb2.ListPoliciesResponse,
    ]
    """List Policies."""

    GetPoliciesCount: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.GetPoliciesCountRequest,
        agntcy.identity.service.v1alpha1.policy_service_pb2.GetPoliciesCountResponse,
    ]
    """Get policies total count."""

    GetPolicy: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.GetPolicyRequest,
        agntcy.identity.service.v1alpha1.policy_pb2.Policy,
    ]
    """Get Policy by id"""

    CreatePolicy: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.CreatePolicyRequest,
        agntcy.identity.service.v1alpha1.policy_pb2.Policy,
    ]
    """Create a new Policy."""

    UpdatePolicy: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.UpdatePolicyRequest,
        agntcy.identity.service.v1alpha1.policy_pb2.Policy,
    ]
    """Update a Policy."""

    DeletePolicy: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.DeletePolicyRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Delete an existing Policy."""

    ListRules: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.ListRulesRequest,
        agntcy.identity.service.v1alpha1.policy_service_pb2.ListRulesResponse,
    ]
    """List Rules."""

    GetRule: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.GetRuleRequest,
        agntcy.identity.service.v1alpha1.policy_pb2.Rule,
    ]
    """Get Rule by id"""

    CreateRule: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.CreateRuleRequest,
        agntcy.identity.service.v1alpha1.policy_pb2.Rule,
    ]
    """Create a new Rule."""

    UpdateRule: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.UpdateRuleRequest,
        agntcy.identity.service.v1alpha1.policy_pb2.Rule,
    ]
    """Update a Rule."""

    DeleteRule: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.DeleteRuleRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Delete an existing Rule."""

class PolicyServiceAsyncStub:
    """PolicyService manages policy."""

    ListPolicies: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.ListPoliciesRequest,
        agntcy.identity.service.v1alpha1.policy_service_pb2.ListPoliciesResponse,
    ]
    """List Policies."""

    GetPoliciesCount: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.GetPoliciesCountRequest,
        agntcy.identity.service.v1alpha1.policy_service_pb2.GetPoliciesCountResponse,
    ]
    """Get policies total count."""

    GetPolicy: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.GetPolicyRequest,
        agntcy.identity.service.v1alpha1.policy_pb2.Policy,
    ]
    """Get Policy by id"""

    CreatePolicy: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.CreatePolicyRequest,
        agntcy.identity.service.v1alpha1.policy_pb2.Policy,
    ]
    """Create a new Policy."""

    UpdatePolicy: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.UpdatePolicyRequest,
        agntcy.identity.service.v1alpha1.policy_pb2.Policy,
    ]
    """Update a Policy."""

    DeletePolicy: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.DeletePolicyRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Delete an existing Policy."""

    ListRules: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.ListRulesRequest,
        agntcy.identity.service.v1alpha1.policy_service_pb2.ListRulesResponse,
    ]
    """List Rules."""

    GetRule: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.GetRuleRequest,
        agntcy.identity.service.v1alpha1.policy_pb2.Rule,
    ]
    """Get Rule by id"""

    CreateRule: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.CreateRuleRequest,
        agntcy.identity.service.v1alpha1.policy_pb2.Rule,
    ]
    """Create a new Rule."""

    UpdateRule: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.UpdateRuleRequest,
        agntcy.identity.service.v1alpha1.policy_pb2.Rule,
    ]
    """Update a Rule."""

    DeleteRule: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.policy_service_pb2.DeleteRuleRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Delete an existing Rule."""

class PolicyServiceServicer(metaclass=abc.ABCMeta):
    """PolicyService manages policy."""

    @abc.abstractmethod
    def ListPolicies(
        self,
        request: agntcy.identity.service.v1alpha1.policy_service_pb2.ListPoliciesRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.policy_service_pb2.ListPoliciesResponse, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.policy_service_pb2.ListPoliciesResponse]]:
        """List Policies."""

    @abc.abstractmethod
    def GetPoliciesCount(
        self,
        request: agntcy.identity.service.v1alpha1.policy_service_pb2.GetPoliciesCountRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.policy_service_pb2.GetPoliciesCountResponse, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.policy_service_pb2.GetPoliciesCountResponse]]:
        """Get policies total count."""

    @abc.abstractmethod
    def GetPolicy(
        self,
        request: agntcy.identity.service.v1alpha1.policy_service_pb2.GetPolicyRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.policy_pb2.Policy, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.policy_pb2.Policy]]:
        """Get Policy by id"""

    @abc.abstractmethod
    def CreatePolicy(
        self,
        request: agntcy.identity.service.v1alpha1.policy_service_pb2.CreatePolicyRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.policy_pb2.Policy, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.policy_pb2.Policy]]:
        """Create a new Policy."""

    @abc.abstractmethod
    def UpdatePolicy(
        self,
        request: agntcy.identity.service.v1alpha1.policy_service_pb2.UpdatePolicyRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.policy_pb2.Policy, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.policy_pb2.Policy]]:
        """Update a Policy."""

    @abc.abstractmethod
    def DeletePolicy(
        self,
        request: agntcy.identity.service.v1alpha1.policy_service_pb2.DeletePolicyRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Delete an existing Policy."""

    @abc.abstractmethod
    def ListRules(
        self,
        request: agntcy.identity.service.v1alpha1.policy_service_pb2.ListRulesRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.policy_service_pb2.ListRulesResponse, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.policy_service_pb2.ListRulesResponse]]:
        """List Rules."""

    @abc.abstractmethod
    def GetRule(
        self,
        request: agntcy.identity.service.v1alpha1.policy_service_pb2.GetRuleRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.policy_pb2.Rule, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.policy_pb2.Rule]]:
        """Get Rule by id"""

    @abc.abstractmethod
    def CreateRule(
        self,
        request: agntcy.identity.service.v1alpha1.policy_service_pb2.CreateRuleRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.policy_pb2.Rule, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.policy_pb2.Rule]]:
        """Create a new Rule."""

    @abc.abstractmethod
    def UpdateRule(
        self,
        request: agntcy.identity.service.v1alpha1.policy_service_pb2.UpdateRuleRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.policy_pb2.Rule, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.policy_pb2.Rule]]:
        """Update a Rule."""

    @abc.abstractmethod
    def DeleteRule(
        self,
        request: agntcy.identity.service.v1alpha1.policy_service_pb2.DeleteRuleRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Delete an existing Rule."""

def add_PolicyServiceServicer_to_server(servicer: PolicyServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

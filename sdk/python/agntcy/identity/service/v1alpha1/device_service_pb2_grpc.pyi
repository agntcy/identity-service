"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2025 AGNTCY Contributors (https://github.com/agntcy)
SPDX-License-Identifier: Apache-2.0
"""

import abc
import agntcy.identity.service.v1alpha1.device_pb2
import agntcy.identity.service.v1alpha1.device_service_pb2
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class DeviceServiceStub:
    """DeviceService manages device."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    AddDevice: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.device_service_pb2.AddDeviceRequest,
        agntcy.identity.service.v1alpha1.device_pb2.Device,
    ]
    """Add new device for approval flow"""

    RegisterDevice: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.device_service_pb2.RegisterDeviceRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Add new device for approval flow"""

    ListDevices: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.device_service_pb2.ListDevicesRequest,
        agntcy.identity.service.v1alpha1.device_service_pb2.ListDevicesResponse,
    ]
    """List all registered devices"""

    DeleteDevice: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.device_service_pb2.DeleteDeviceRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Delete a registered Device."""

    TestDevice: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.device_service_pb2.TestDeviceRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Send a test notification to a registered device to see if it's well configured."""

class DeviceServiceAsyncStub:
    """DeviceService manages device."""

    AddDevice: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.device_service_pb2.AddDeviceRequest,
        agntcy.identity.service.v1alpha1.device_pb2.Device,
    ]
    """Add new device for approval flow"""

    RegisterDevice: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.device_service_pb2.RegisterDeviceRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Add new device for approval flow"""

    ListDevices: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.device_service_pb2.ListDevicesRequest,
        agntcy.identity.service.v1alpha1.device_service_pb2.ListDevicesResponse,
    ]
    """List all registered devices"""

    DeleteDevice: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.device_service_pb2.DeleteDeviceRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Delete a registered Device."""

    TestDevice: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.device_service_pb2.TestDeviceRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Send a test notification to a registered device to see if it's well configured."""

class DeviceServiceServicer(metaclass=abc.ABCMeta):
    """DeviceService manages device."""

    @abc.abstractmethod
    def AddDevice(
        self,
        request: agntcy.identity.service.v1alpha1.device_service_pb2.AddDeviceRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.device_pb2.Device, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.device_pb2.Device]]:
        """Add new device for approval flow"""

    @abc.abstractmethod
    def RegisterDevice(
        self,
        request: agntcy.identity.service.v1alpha1.device_service_pb2.RegisterDeviceRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Add new device for approval flow"""

    @abc.abstractmethod
    def ListDevices(
        self,
        request: agntcy.identity.service.v1alpha1.device_service_pb2.ListDevicesRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.device_service_pb2.ListDevicesResponse, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.device_service_pb2.ListDevicesResponse]]:
        """List all registered devices"""

    @abc.abstractmethod
    def DeleteDevice(
        self,
        request: agntcy.identity.service.v1alpha1.device_service_pb2.DeleteDeviceRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Delete a registered Device."""

    @abc.abstractmethod
    def TestDevice(
        self,
        request: agntcy.identity.service.v1alpha1.device_service_pb2.TestDeviceRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Send a test notification to a registered device to see if it's well configured."""

def add_DeviceServiceServicer_to_server(servicer: DeviceServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

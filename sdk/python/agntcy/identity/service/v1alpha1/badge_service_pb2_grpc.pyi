"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2025 AGNTCY Contributors (https://github.com/agntcy)
SPDX-License-Identifier: Apache-2.0
"""

import abc
import agntcy.identity.service.v1alpha1.badge_pb2
import agntcy.identity.service.v1alpha1.badge_service_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class BadgeServiceStub:
    """BadgeService manages badges."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    IssueBadge: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.badge_service_pb2.IssueBadgeRequest,
        agntcy.identity.service.v1alpha1.badge_pb2.Badge,
    ]
    """Create a new Badge."""

    VerifyBadge: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.badge_service_pb2.VerifyBadgeRequest,
        agntcy.identity.service.v1alpha1.badge_pb2.VerificationResult,
    ]
    """Verify a badge."""

class BadgeServiceAsyncStub:
    """BadgeService manages badges."""

    IssueBadge: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.badge_service_pb2.IssueBadgeRequest,
        agntcy.identity.service.v1alpha1.badge_pb2.Badge,
    ]
    """Create a new Badge."""

    VerifyBadge: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.badge_service_pb2.VerifyBadgeRequest,
        agntcy.identity.service.v1alpha1.badge_pb2.VerificationResult,
    ]
    """Verify a badge."""

class BadgeServiceServicer(metaclass=abc.ABCMeta):
    """BadgeService manages badges."""

    @abc.abstractmethod
    def IssueBadge(
        self,
        request: agntcy.identity.service.v1alpha1.badge_service_pb2.IssueBadgeRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.badge_pb2.Badge, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.badge_pb2.Badge]]:
        """Create a new Badge."""

    @abc.abstractmethod
    def VerifyBadge(
        self,
        request: agntcy.identity.service.v1alpha1.badge_service_pb2.VerifyBadgeRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.badge_pb2.VerificationResult, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.badge_pb2.VerificationResult]]:
        """Verify a badge."""

def add_BadgeServiceServicer_to_server(servicer: BadgeServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

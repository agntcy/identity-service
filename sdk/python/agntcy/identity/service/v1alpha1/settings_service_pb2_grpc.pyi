"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2025 AGNTCY Contributors (https://github.com/agntcy)
SPDX-License-Identifier: Apache-2.0
"""

import abc
import agntcy.identity.service.v1alpha1.settings_pb2
import agntcy.identity.service.v1alpha1.settings_service_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class SettingsServiceStub:
    """SettingsService manages settings."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetSettings: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.settings_service_pb2.GetSettingsRequest,
        agntcy.identity.service.v1alpha1.settings_pb2.Settings,
    ]
    """Get Settings"""

    SetApiKey: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.settings_service_pb2.SetApiKeyRequest,
        agntcy.identity.service.v1alpha1.settings_pb2.ApiKey,
    ]
    """Set up API Key"""

    SetIssuer: grpc.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.settings_service_pb2.SetIssuerRequest,
        agntcy.identity.service.v1alpha1.settings_pb2.IssuerSettings,
    ]
    """Set up Issuer"""

class SettingsServiceAsyncStub:
    """SettingsService manages settings."""

    GetSettings: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.settings_service_pb2.GetSettingsRequest,
        agntcy.identity.service.v1alpha1.settings_pb2.Settings,
    ]
    """Get Settings"""

    SetApiKey: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.settings_service_pb2.SetApiKeyRequest,
        agntcy.identity.service.v1alpha1.settings_pb2.ApiKey,
    ]
    """Set up API Key"""

    SetIssuer: grpc.aio.UnaryUnaryMultiCallable[
        agntcy.identity.service.v1alpha1.settings_service_pb2.SetIssuerRequest,
        agntcy.identity.service.v1alpha1.settings_pb2.IssuerSettings,
    ]
    """Set up Issuer"""

class SettingsServiceServicer(metaclass=abc.ABCMeta):
    """SettingsService manages settings."""

    @abc.abstractmethod
    def GetSettings(
        self,
        request: agntcy.identity.service.v1alpha1.settings_service_pb2.GetSettingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.settings_pb2.Settings, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.settings_pb2.Settings]]:
        """Get Settings"""

    @abc.abstractmethod
    def SetApiKey(
        self,
        request: agntcy.identity.service.v1alpha1.settings_service_pb2.SetApiKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.settings_pb2.ApiKey, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.settings_pb2.ApiKey]]:
        """Set up API Key"""

    @abc.abstractmethod
    def SetIssuer(
        self,
        request: agntcy.identity.service.v1alpha1.settings_service_pb2.SetIssuerRequest,
        context: _ServicerContext,
    ) -> typing.Union[agntcy.identity.service.v1alpha1.settings_pb2.IssuerSettings, collections.abc.Awaitable[agntcy.identity.service.v1alpha1.settings_pb2.IssuerSettings]]:
        """Set up Issuer"""

def add_SettingsServiceServicer_to_server(servicer: SettingsServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
